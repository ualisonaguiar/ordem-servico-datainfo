<?php

namespace InepZend\Util;

use InepZend\UnitTest\AbstractUnitTest;

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class FileSystemTest extends AbstractUnitTest
{

    /**
     * Generated from @assert (__DIR__ . '/testFile.txt', date('d-m-Y')) == true.
     *
     * @covers \InepZend\Util\FileSystem::insertContentIntoFile
     */
    public function testInsertContentIntoFile()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::insertContentIntoFile(__DIR__ . '/testFile.txt', date('d-m-Y'))
        );
    }

    /**
     * Generated from @assert () === false.
     *
     * @covers \InepZend\Util\FileSystem::getContentFromFile
     */
    public function testGetContentFromFile()
    {
        $this->assertSame(
                false
                , \InepZend\Util\FileSystem::getContentFromFile()
        );
    }

    /**
     * Generated from @assert ('arquivo_nao_existe') === false.
     *
     * @covers \InepZend\Util\FileSystem::getContentFromFile
     */
    public function testGetContentFromFile2()
    {
        $this->assertSame(
                false
                , \InepZend\Util\FileSystem::getContentFromFile('arquivo_nao_existe')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt') === "nao_remover\n".
     *
     * @covers \InepZend\Util\FileSystem::getContentFromFile
     */
    public function testGetContentFromFile3()
    {
        $this->assertSame(
                "nao_remover\n"
                , \InepZend\Util\FileSystem::getContentFromFile(__DIR__ . '/test.txt')
        );
    }

    /**
     * Generated from @assert () === array( 'txt' => array('text/plain', 'application/txt', 'browser/internal', 'text/anytext', 'widetext/plain', 'widetext/paragraph'), 'htm' => array('text/html', 'text/plain'), 'html' => array('text/html', 'text/plain'), 'php' => array('application/x-httpd-php', 'text/php', 'application/php', 'magnus-internal/shellcgi', 'application/x-php', 'text/html'), 'java' => array('text/x-java-source', 'text/java', 'text/x-java', 'application/ms-java'), 'css' => array('text/css', 'application/css-stylesheet'), 'js' => array('application/x-javascript', 'text/javascript', 'application/javascript'), 'json' => array('application/json'), 'xml' => array('text/xml', 'application/xml', 'application/x-xml'), 'swf' => array('application/x-shockwave-flash', 'application/x-shockwave-flash2-preview', 'application/futuresplash', 'image/vnd.rn-realflash'), 'flv' => array('video/x-flv'), 'csv' => array('text/comma-separated-values', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.ms-excel', 'application/vnd.msexcel', 'text/anytext', 'text/plain'), 'png' => array('image/png', 'image/x-png', 'application/png', 'application/x-png'), 'jpe' => array('image/jpeg'), 'jpeg' => array('image/jpeg', 'image/jpg', 'image/jpe_', 'image/pjpeg', 'image/vnd.swiftview-jpeg'), 'jpg' => array('image/jpeg', 'image/jpg', 'image/jp_', 'application/jpg', 'application/x-jpg', 'image/pjpeg', 'image/pipeg', 'image/vnd.swiftview-jpeg', 'image/x-xbitmap'), 'gif' => array('image/gif', 'image/x-xbitmap', 'image/gi_'), 'bmp' => array('image/bmp', 'image/x-bmp', 'image/x-bitmap', 'image/x-xbitmap', 'image/x-win-bitmap', 'image/x-windows-bmp', 'image/ms-bmp', 'image/x-ms-bmp', 'application/bmp', 'application/x-bmp', 'application/x-win-bitmap'), 'ico' => array('image/ico', 'image/x-icon', 'application/ico', 'application/x-ico', 'application/x-win-bitmap', 'image/x-win-bitmap', 'image/vnd.microsoft.icon'), 'tiff' => array('image/tiff'), 'tif' => array('image/tif', 'image/x-tif', 'image/tiff', 'image/x-tiff', 'application/tif', 'application/x-tif', 'application/tiff', 'application/x-tiff'), 'svg' => array('image/svg+xml'), 'svgz' => array('image/svg+xml'), 'zip' => array('application/zip', 'application/x-zip', 'application/x-zip-compressed', 'application/x-compress', 'application/x-compressed', 'multipart/x-zip', 'application/octet-stream'), 'rar' => array('application/x-rar-compressed', 'application/rar'), 'exe' => array('application/octet-stream', 'application/x-msdownload', 'application/exe', 'application/x-exe', 'application/dos-exe', 'vms/exe', 'application/x-winexe', 'application/msdos-windows', 'application/x-msdos-program', 'application/x-dosexe'), 'msi' => array('application/x-ole-storage', 'text/mspg-legacyinfo', 'application/x-msdownload'), 'cab' => array('vnd.ms-cab-compressed', 'application/vnd.ms-cab-compressed'), 'jar' => array('application/java-archive'), 'dll' => array('application/x-msdownload', 'application/octet-stream', 'application/x-msdos-program'), 'cmp' => array('application/octet-stream'), 'mp3' => array('audio/mpeg', 'audio/x-mpeg', 'audio/mp3', 'audio/x-mp3', 'audio/mpeg3', 'audio/x-mpeg3', 'audio/mpg', 'audio/x-mpg', 'audio/x-mpegaudio'), 'qt' => array('video/quicktime'), 'mov' => array('video/quicktime', 'video/x-quicktime', 'image/mov', 'audio/aiff', 'audio/x-midi', 'audio/x-wav', 'video/avi'), 'avi' => array('video/avi', 'video/msvideo', 'video/x-msvideo', 'image/avi', 'video/xmpg2', 'application/x-troff-msvideo', 'audio/aiff', 'audio/avi'), 'pdf' => array('application/pdf', 'application/x-pdf', 'application/acrobat', 'applications/vnd.pdf', 'text/pdf', 'text/x-pdf', 'application/x-download'), 'psd' => array('image/photoshop', 'image/x-photoshop', 'image/psd', 'application/photoshop', 'application/psd', 'zz-application/zz-winassoc-psd', 'image/vnd.adobe.photoshop'), 'ai' => array('application/postscript'), 'eps' => array('application/postscript', 'application/eps', 'application/x-eps', 'image/eps', 'image/x-eps'), 'ps' => array('application/postscript', 'application/ps', 'application/x-postscript', 'application/x-ps', 'text/postscript', 'application/x-postscript-not-eps'), 'doc' => array('application/msword', 'application/doc', 'appl/text', 'application/vnd.msword', 'application/vnd.ms-word', 'application/winword', 'application/word', 'application/x-msw6', 'application/x-msword'), 'docx' => array('application/vnd.openxmlformats-officedocument.wordprocessingml.document'), 'rtf' => array('application/rtf', 'application/x-rtf', 'text/rtf', 'text/richtext', 'application/x-soffice', 'application/save'), 'xls' => array('application/vnd.ms-excel', 'application/msexcel', 'application/x-msexcel', 'application/x-ms-excel', 'application/vnd.ms-excel', 'application/x-excel', 'application/x-dos_ms_excel', 'application/xls', 'application/vnd.ms-office'), 'ppt' => array('application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/ms-powerpoint', 'application/mspowerpnt', 'application/vnd-mspowerpoint', 'application/powerpoint', 'application/x-powerpoint', 'application/x-m'), 'xlsx' => array('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'), 'pptx' => array('application/vnd.openxmlformats-officedocument.presentationml.presentation'), 'odt' => array('application/vnd.oasis.opendocument.text', 'application/x-vnd.oasis.opendocument.text'), 'ods' => array('application/vnd.oasis.opendocument.spreadsheet', 'application/x-vnd.oasis.opendocument.spreadsheet'), 'odp' => array('application/vnd.oasis.opendocument.presentation', 'application/x-vnd.oasis.opendocument.presentation'), 'odf' => array('application/vnd.oasis.opendocument.formula', 'application/x-vnd.oasis.opendocument.formula')).
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentStructure
     */
    public function testGetMimeContentStructure()
    {
        $this->assertSame(
                array('txt' => array('text/plain', 'application/txt', 'browser/internal', 'text/anytext', 'widetext/plain', 'widetext/paragraph'), 'htm' => array('text/html', 'text/plain'), 'html' => array('text/html', 'text/plain'), 'php' => array('application/x-httpd-php', 'text/php', 'application/php', 'magnus-internal/shellcgi', 'application/x-php', 'text/html'), 'java' => array('text/x-java-source', 'text/java', 'text/x-java', 'application/ms-java'), 'css' => array('text/css', 'application/css-stylesheet'), 'js' => array('application/x-javascript', 'text/javascript', 'application/javascript'), 'json' => array('application/json'), 'xml' => array('text/xml', 'application/xml', 'application/x-xml'), 'swf' => array('application/x-shockwave-flash', 'application/x-shockwave-flash2-preview', 'application/futuresplash', 'image/vnd.rn-realflash'), 'flv' => array('video/x-flv'), 'csv' => array('text/comma-separated-values', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.ms-excel', 'application/vnd.msexcel', 'text/anytext', 'text/plain'), 'png' => array('image/png', 'image/x-png', 'application/png', 'application/x-png'), 'jpe' => array('image/jpeg'), 'jpeg' => array('image/jpeg', 'image/jpg', 'image/jpe_', 'image/pjpeg', 'image/vnd.swiftview-jpeg'), 'jpg' => array('image/jpeg', 'image/jpg', 'image/jp_', 'application/jpg', 'application/x-jpg', 'image/pjpeg', 'image/pipeg', 'image/vnd.swiftview-jpeg', 'image/x-xbitmap'), 'gif' => array('image/gif', 'image/x-xbitmap', 'image/gi_'), 'bmp' => array('image/bmp', 'image/x-bmp', 'image/x-bitmap', 'image/x-xbitmap', 'image/x-win-bitmap', 'image/x-windows-bmp', 'image/ms-bmp', 'image/x-ms-bmp', 'application/bmp', 'application/x-bmp', 'application/x-win-bitmap'), 'ico' => array('image/ico', 'image/x-icon', 'application/ico', 'application/x-ico', 'application/x-win-bitmap', 'image/x-win-bitmap', 'image/vnd.microsoft.icon'), 'tiff' => array('image/tiff'), 'tif' => array('image/tif', 'image/x-tif', 'image/tiff', 'image/x-tiff', 'application/tif', 'application/x-tif', 'application/tiff', 'application/x-tiff'), 'svg' => array('image/svg+xml'), 'svgz' => array('image/svg+xml'), 'zip' => array('application/zip', 'application/x-zip', 'application/x-zip-compressed', 'application/x-compress', 'application/x-compressed', 'multipart/x-zip', 'application/octet-stream'), 'rar' => array('application/x-rar-compressed', 'application/rar'), 'exe' => array('application/octet-stream', 'application/x-msdownload', 'application/exe', 'application/x-exe', 'application/dos-exe', 'vms/exe', 'application/x-winexe', 'application/msdos-windows', 'application/x-msdos-program', 'application/x-dosexe'), 'msi' => array('application/x-ole-storage', 'text/mspg-legacyinfo', 'application/x-msdownload'), 'cab' => array('vnd.ms-cab-compressed', 'application/vnd.ms-cab-compressed'), 'jar' => array('application/java-archive'), 'dll' => array('application/x-msdownload', 'application/octet-stream', 'application/x-msdos-program'), 'cmp' => array('application/octet-stream'), 'mp3' => array('audio/mpeg', 'audio/x-mpeg', 'audio/mp3', 'audio/x-mp3', 'audio/mpeg3', 'audio/x-mpeg3', 'audio/mpg', 'audio/x-mpg', 'audio/x-mpegaudio'), 'qt' => array('video/quicktime'), 'mov' => array('video/quicktime', 'video/x-quicktime', 'image/mov', 'audio/aiff', 'audio/x-midi', 'audio/x-wav', 'video/avi'), 'avi' => array('video/avi', 'video/msvideo', 'video/x-msvideo', 'image/avi', 'video/xmpg2', 'application/x-troff-msvideo', 'audio/aiff', 'audio/avi'), 'pdf' => array('application/pdf', 'application/x-pdf', 'application/acrobat', 'applications/vnd.pdf', 'text/pdf', 'text/x-pdf', 'application/x-download'), 'psd' => array('image/photoshop', 'image/x-photoshop', 'image/psd', 'application/photoshop', 'application/psd', 'zz-application/zz-winassoc-psd', 'image/vnd.adobe.photoshop'), 'ai' => array('application/postscript'), 'eps' => array('application/postscript', 'application/eps', 'application/x-eps', 'image/eps', 'image/x-eps'), 'ps' => array('application/postscript', 'application/ps', 'application/x-postscript', 'application/x-ps', 'text/postscript', 'application/x-postscript-not-eps'), 'doc' => array('application/msword', 'application/doc', 'appl/text', 'application/vnd.msword', 'application/vnd.ms-word', 'application/winword', 'application/word', 'application/x-msw6', 'application/x-msword'), 'docx' => array('application/vnd.openxmlformats-officedocument.wordprocessingml.document'), 'rtf' => array('application/rtf', 'application/x-rtf', 'text/rtf', 'text/richtext', 'application/x-soffice', 'application/save'), 'xls' => array('application/vnd.ms-excel', 'application/msexcel', 'application/x-msexcel', 'application/x-ms-excel', 'application/vnd.ms-excel', 'application/x-excel', 'application/x-dos_ms_excel', 'application/xls', 'application/vnd.ms-office'), 'ppt' => array('application/vnd.ms-powerpoint', 'application/mspowerpoint', 'application/ms-powerpoint', 'application/mspowerpnt', 'application/vnd-mspowerpoint', 'application/powerpoint', 'application/x-powerpoint', 'application/x-m'), 'xlsx' => array('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'), 'pptx' => array('application/vnd.openxmlformats-officedocument.presentationml.presentation'), 'odt' => array('application/vnd.oasis.opendocument.text', 'application/x-vnd.oasis.opendocument.text'), 'ods' => array('application/vnd.oasis.opendocument.spreadsheet', 'application/x-vnd.oasis.opendocument.spreadsheet'), 'odp' => array('application/vnd.oasis.opendocument.presentation', 'application/x-vnd.oasis.opendocument.presentation'), 'odf' => array('application/vnd.oasis.opendocument.formula', 'application/x-vnd.oasis.opendocument.formula'))
                , \InepZend\Util\FileSystem::getMimeContentStructure()
        );
    }

    /**
     * Generated from @assert ('html') === array('text/html', 'text/plain').
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentFromExtension
     */
    public function testGetMimeContentFromExtension()
    {
        $this->assertSame(
                array('text/html', 'text/plain')
                , \InepZend\Util\FileSystem::getMimeContentFromExtension('html')
        );
    }

    /**
     * Generated from @assert ('empty') === array().
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentFromExtension
     */
    public function testGetMimeContentFromExtension2()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::getMimeContentFromExtension('empty')
        );
    }

    /**
     * Generated from @assert ('') === null.
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentFromExtension
     */
    public function testGetMimeContentFromExtension3()
    {
        $this->assertSame(
                null
                , \InepZend\Util\FileSystem::getMimeContentFromExtension('')
        );
    }

    /**
     * Generated from @assert () === null.
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentFromExtension
     */
    public function testGetMimeContentFromExtension4()
    {
        $this->assertSame(
                null
                , \InepZend\Util\FileSystem::getMimeContentFromExtension()
        );
    }

    /**
     * Generated from @assert () === false.
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentFromFile
     */
    public function testGetMimeContentFromFile()
    {
        $this->assertSame(
                false
                , \InepZend\Util\FileSystem::getMimeContentFromFile()
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt') == 'text/plain'.
     *
     * @covers \InepZend\Util\FileSystem::getMimeContentFromFile
     */
    public function testGetMimeContentFromFile2()
    {
        $this->assertEquals(
                'text/plain'
                , \InepZend\Util\FileSystem::getMimeContentFromFile(__DIR__ . '/test.txt')
        );
    }

    /**
     * Generated from @assert () === null.
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromMimeContent
     */
    public function testGetExtensionFromMimeContent()
    {
        $this->assertSame(
                null
                , \InepZend\Util\FileSystem::getExtensionFromMimeContent()
        );
    }

    /**
     * Generated from @assert ('text/plain') === array('txt', 'htm', 'html', 'csv').
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromMimeContent
     */
    public function testGetExtensionFromMimeContent2()
    {
        $this->assertSame(
                array('txt', 'htm', 'html', 'csv')
                , \InepZend\Util\FileSystem::getExtensionFromMimeContent('text/plain')
        );
    }

    /**
     * Generated from @assert () === null.
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromFileName
     */
    public function testGetExtensionFromFileName()
    {
        $this->assertSame(
                null
                , \InepZend\Util\FileSystem::getExtensionFromFileName()
        );
    }

    /**
     * Generated from @assert ('test.txt') === 'txt'.
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromFileName
     */
    public function testGetExtensionFromFileName2()
    {
        $this->assertSame(
                'txt'
                , \InepZend\Util\FileSystem::getExtensionFromFileName('test.txt')
        );
    }

    /**
     * Generated from @assert ('InstitutoNacionalEnsiso.Anisio.Texeira.pdf') === 'pdf'.
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromFileName
     */
    public function testGetExtensionFromFileName3()
    {
        $this->assertSame(
                'pdf'
                , \InepZend\Util\FileSystem::getExtensionFromFileName('InstitutoNacionalEnsiso.Anisio.Texeira.pdf')
        );
    }

    /**
     * Generated from @assert ('Instituto.Nacional.Ensiso.Anisio.Texeira.pdf') === 'pdf'.
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromFileName
     */
    public function testGetExtensionFromFileName4()
    {
        $this->assertSame(
                'pdf'
                , \InepZend\Util\FileSystem::getExtensionFromFileName('Instituto.Nacional.Ensiso.Anisio.Texeira.pdf')
        );
    }

    /**
     * Generated from @assert ('type/not') === null.
     *
     * @covers \InepZend\Util\FileSystem::getExtensionFromMimeContent
     */
    public function testGetExtensionFromMimeContent3()
    {
        $this->assertSame(
                null
                , \InepZend\Util\FileSystem::getExtensionFromMimeContent('type/not')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::globRecursive
     */
    public function testGlobRecursive()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::globRecursive(__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::globRecursive
     */
    public function testGlobRecursive2()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::globRecursive(__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::globRecursive
     */
    public function testGlobRecursive3()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::globRecursive(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::globRecursive
     */
    public function testGlobRecursive4()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::globRecursive(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursive
     */
    public function testScandirRecursive()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::scandirRecursive(__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursive
     */
    public function testScandirRecursive2()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::scandirRecursive(__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/FormGenerator/', null, array(), true, true) === array(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/FormGenerator/Add', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/FormGenerator/Element').
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursive
     */
    public function testScandirRecursive3()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/FormGenerator/Add', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/FormGenerator/Element')
                , \InepZend\Util\FileSystem::scandirRecursive(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/FormGenerator/', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursive
     */
    public function testScandirRecursive4()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::scandirRecursive(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('glob',__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert ('scandir',__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive2()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive3()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive4()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive5()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive6()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive7()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive8()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive9()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive10()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive11()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive12()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive13()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive14()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive15()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursive
     */
    public function testListFileFolderRecursive16()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursive('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/') == array('strPath' => __DIR__ . '/', 'arrSubPath' => array()).
     *
     * @covers \InepZend\Util\FileSystem::listTreePath
     */
    public function testListTreePath()
    {
        $this->assertEquals(
                array('strPath' => __DIR__ . '/', 'arrSubPath' => array())
                , \InepZend\Util\FileSystem::listTreePath(__DIR__ . '/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util') == array('strPath' => __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'arrSubPath' => array()).
     *
     * @covers \InepZend\Util\FileSystem::listTreePath
     */
    public function testListTreePath2()
    {
        $this->assertEquals(
                array('strPath' => __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'arrSubPath' => array())
                , \InepZend\Util\FileSystem::listTreePath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/', 1, 2) == null.
     *
     * @covers \InepZend\Util\FileSystem::listTreePath
     */
    public function testListTreePath3()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::listTreePath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/', 1, 2)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/', 2, 1) != array().
     *
     * @covers \InepZend\Util\FileSystem::listTreePath
     */
    public function testListTreePath4()
    {
        $this->assertNotEquals(
                array()
                , \InepZend\Util\FileSystem::listTreePath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/', 2, 1)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::globRecursivePartPath
     */
    public function testGlobRecursivePartPath()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::globRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::globRecursivePartPath
     */
    public function testGlobRecursivePartPath2()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::globRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::globRecursivePartPath
     */
    public function testGlobRecursivePartPath3()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::globRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::globRecursivePartPath
     */
    public function testGlobRecursivePartPath4()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::globRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursivePartPath
     */
    public function testScandirRecursivePartPath()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::scandirRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursivePartPath
     */
    public function testScandirRecursivePartPath2()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::scandirRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursivePartPath
     */
    public function testScandirRecursivePartPath3()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::scandirRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::scandirRecursivePartPath
     */
    public function testScandirRecursivePartPath4()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::scandirRecursivePartPath(__DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/library/InepZend/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath2()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/library/InepZend/')
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath3()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat') === array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat').
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath4()
    {
        $this->assertSame(
                array(__DIR__ . '/../../../../../vendor/InepZend/bin/apigen_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/classmap_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/full_generator.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit-module.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/phpunit.bat', __DIR__ . '/../../../../../vendor/InepZend/bin/templatemap_generator.bat')
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', 'bat')
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath5()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath6()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), true, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath7()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath8()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath9()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath10()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/bin', null, array(), false, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath11()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath12()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, false)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath13()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath14()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), true, true)
        );
    }

    /**
     * Generated from @assert ('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath15()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('glob', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true)
        );
    }

    /**
     * Generated from @assert ('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true) === array().
     *
     * @covers \InepZend\Util\FileSystem::listFileFolderRecursivePartPath
     */
    public function testListFileFolderRecursivePartPath16()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\FileSystem::listFileFolderRecursivePartPath('scandir', __DIR__ . '/../../../../../vendor/InepZend/test/InepZend/Util', 'Util', array(), false, true)
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) === \InepZend\Util\FileSystem::getChmod(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')).
     *
     * @covers \InepZend\Util\FileSystem::getChmod
     */
    public function testGetChmod()
    {
        $this->assertSame(
                \InepZend\Util\FileSystem::getChmod(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
                , \InepZend\Util\FileSystem::getChmod(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) !== false.
     *
     * @covers \InepZend\Util\FileSystem::getChmod
     */
    public function testGetChmod2()
    {
        $this->assertNotSame(
                false
                , \InepZend\Util\FileSystem::getChmod(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') === false.
     *
     * @covers \InepZend\Util\FileSystem::getChmod
     */
    public function testGetChmod3()
    {
        $this->assertSame(
                false
                , \InepZend\Util\FileSystem::getChmod('./path/')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) === \InepZend\Util\FileSystem::getPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')).
     *
     * @covers \InepZend\Util\FileSystem::getPermission
     */
    public function testGetPermission()
    {
        $this->assertSame(
                \InepZend\Util\FileSystem::getPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
                , \InepZend\Util\FileSystem::getPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) !== false.
     *
     * @covers \InepZend\Util\FileSystem::getPermission
     */
    public function testGetPermission2()
    {
        $this->assertNotSame(
                false
                , \InepZend\Util\FileSystem::getPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') === false.
     *
     * @covers \InepZend\Util\FileSystem::getPermission
     */
    public function testGetPermission3()
    {
        $this->assertSame(
                false
                , \InepZend\Util\FileSystem::getPermission('./path/')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) == \InepZend\Util\FileSystem::getPermissionMeaning(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')).
     *
     * @covers \InepZend\Util\FileSystem::getPermissionMeaning
     */
    public function testGetPermissionMeaning()
    {
        $this->assertEquals(
                \InepZend\Util\FileSystem::getPermissionMeaning(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
                , \InepZend\Util\FileSystem::getPermissionMeaning(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) !== null.
     *
     * @covers \InepZend\Util\FileSystem::getPermissionMeaning
     */
    public function testGetPermissionMeaning2()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::getPermissionMeaning(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') == false.
     *
     * @covers \InepZend\Util\FileSystem::getPermissionMeaning
     */
    public function testGetPermissionMeaning3()
    {
        $this->assertEquals(
                false
                , \InepZend\Util\FileSystem::getPermissionMeaning('./path/')
        );
    }

    /**
     * Generated from @assert ('drwxrwxrwx') === array('octal' => '0777', 'decimal' => 511).
     *
     * @covers \InepZend\Util\FileSystem::convertPermissionToChmod
     */
    public function testConvertPermissionToChmod()
    {
        $this->assertSame(
                array('octal' => '0777', 'decimal' => 511)
                , \InepZend\Util\FileSystem::convertPermissionToChmod('drwxrwxrwx')
        );
    }

    /**
     * Generated from @assert ('lrwxrwxrwx') === array('octal' => '0777', 'decimal' => 511).
     *
     * @covers \InepZend\Util\FileSystem::convertPermissionToChmod
     */
    public function testConvertPermissionToChmod2()
    {
        $this->assertSame(
                array('octal' => '0777', 'decimal' => 511)
                , \InepZend\Util\FileSystem::convertPermissionToChmod('lrwxrwxrwx')
        );
    }

    /**
     * Generated from @assert ('-rw-------') === array('octal' => '0600', 'decimal' => 384).
     *
     * @covers \InepZend\Util\FileSystem::convertPermissionToChmod
     */
    public function testConvertPermissionToChmod3()
    {
        $this->assertSame(
                array('octal' => '0600', 'decimal' => 384)
                , \InepZend\Util\FileSystem::convertPermissionToChmod('-rw-------')
        );
    }

    /**
     * Generated from @assert ('drwxr-xr-x') === array('octal' => '0755', 'decimal' => 493).
     *
     * @covers \InepZend\Util\FileSystem::convertPermissionToChmod
     */
    public function testConvertPermissionToChmod4()
    {
        $this->assertSame(
                array('octal' => '0755', 'decimal' => 493)
                , \InepZend\Util\FileSystem::convertPermissionToChmod('drwxr-xr-x')
        );
    }

    /**
     * Generated from @assert ('çrplk9xr6x') === array('octal' => '0000', 'decimal' => 0).
     *
     * @covers \InepZend\Util\FileSystem::convertPermissionToChmod
     */
    public function testConvertPermissionToChmod5()
    {
        $this->assertSame(
                array('octal' => '0000', 'decimal' => 0)
                , \InepZend\Util\FileSystem::convertPermissionToChmod('çrplk9xr6x')
        );
    }

    /**
     * Generated from @assert ('') === false.
     *
     * @covers \InepZend\Util\FileSystem::convertPermissionToChmod
     */
    public function testConvertPermissionToChmod6()
    {
        $this->assertSame(
                false
                , \InepZend\Util\FileSystem::convertPermissionToChmod('')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) == true.
     *
     * @covers \InepZend\Util\FileSystem::isReadable
     */
    public function testIsReadable()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::isReadable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') == false.
     *
     * @covers \InepZend\Util\FileSystem::isReadable
     */
    public function testIsReadable2()
    {
        $this->assertEquals(
                false
                , \InepZend\Util\FileSystem::isReadable('./path/')
        );
    }

    /**
     * Generated from @assert ('') == null.
     *
     * @covers \InepZend\Util\FileSystem::isWritable
     */
    public function testIsWritable()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::isWritable('')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) == true.
     *
     * @covers \InepZend\Util\FileSystem::isWritable
     */
    public function testIsWritable2()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::isWritable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') == null.
     *
     * @covers \InepZend\Util\FileSystem::isWritable
     */
    public function testIsWritable3()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::isWritable('./path/')
        );
    }

    /**
     * Generated from @assert ('') == null.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::isExecutable('')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) == true.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable2()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::isExecutable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') == null.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable3()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::isExecutable('./path/')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'type') == false.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable4()
    {
        $this->assertEquals(
                false
                , \InepZend\Util\FileSystem::isExecutable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'type')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner') == true.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable5()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::isExecutable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group') == true.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable6()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::isExecutable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others') == true.
     *
     * @covers \InepZend\Util\FileSystem::isExecutable
     */
    public function testIsExecutable7()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::isExecutable(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others')
        );
    }

    /**
     * Generated from @assert ('') == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission('')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission2()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./path/') == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission3()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission('./path/')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'type') == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission4()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'type')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner') == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission5()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group') == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission6()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others') == null.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission7()
    {
        $this->assertEquals(
                null
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner', 'write') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission8()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner', 'write')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group', 'write') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission9()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group', 'write')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others', 'write') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission10()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others', 'write')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner', 'execute') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission11()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner', 'execute')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group', 'execute') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission12()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group', 'execute')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others', 'execute') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission13()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others', 'execute')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner', 'read') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission14()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'owner', 'read')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group', 'read') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission15()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'group', 'read')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others', 'read') == true.
     *
     * @covers \InepZend\Util\FileSystem::checkPermission
     */
    public function testCheckPermission16()
    {
        $this->assertEquals(
                true
                , \InepZend\Util\FileSystem::checkPermission(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'), 'others', 'read')
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) !== null.
     *
     * @covers \InepZend\Util\FileSystem::getModificationTime
     */
    public function testGetModificationTime()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::getModificationTime(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert (\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/')) !== false.
     *
     * @covers \InepZend\Util\FileSystem::getModificationTime
     */
    public function testGetModificationTime2()
    {
        $this->assertNotSame(
                false
                , \InepZend\Util\FileSystem::getModificationTime(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../data/'))
        );
    }

    /**
     * Generated from @assert ('./pathOrFile.php') == false.
     *
     * @covers \InepZend\Util\FileSystem::getModificationTime
     */
    public function testGetModificationTime3()
    {
        $this->assertEquals(
                false
                , \InepZend\Util\FileSystem::getModificationTime('./pathOrFile.php')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesize
     */
    public function testFilesize()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesize(__DIR__ . '/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesize
     */
    public function testFilesize2()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesize(__DIR__ . '/test.txt')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/', 'kilobyte') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesize
     */
    public function testFilesize3()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesize(__DIR__ . '/', 'kilobyte')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt', 'kilobyte') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesize
     */
    public function testFilesize4()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesize(__DIR__ . '/test.txt', 'kilobyte')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/', 'bit') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesize
     */
    public function testFilesize5()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesize(__DIR__ . '/', 'bit')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt', 'bit') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesize
     */
    public function testFilesize6()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesize(__DIR__ . '/test.txt', 'bit')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesizeFormated
     */
    public function testFilesizeFormated()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesizeFormated(__DIR__ . '/')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt') !== null.
     *
     * @covers \InepZend\Util\FileSystem::filesizeFormated
     */
    public function testFilesizeFormated2()
    {
        $this->assertNotSame(
                null
                , \InepZend\Util\FileSystem::filesizeFormated(__DIR__ . '/test.txt')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/test.txt') == 'test.txt'.
     *
     * @covers \InepZend\Util\FileSystem::getFileNameFromPath
     */
    public function testGetFileNameFromPath()
    {
        $this->assertEquals(
                'test.txt'
                , \InepZend\Util\FileSystem::getFileNameFromPath(__DIR__ . '/test.txt')
        );
    }

    /**
     * Generated from @assert (__DIR__ . '/') == ''.
     *
     * @covers \InepZend\Util\FileSystem::getFileNameFromPath
     */
    public function testGetFileNameFromPath2()
    {
        $this->assertEquals(
                ''
                , \InepZend\Util\FileSystem::getFileNameFromPath(__DIR__ . '/')
        );
    }

    protected function tearDown()
    {
        if (file_exists(__DIR__ . '/testFile.txt'))
            unlink(__DIR__ . '/testFile.txt');
        parent::tearDown();
    }

}
