<?php

namespace InepZend\Util;

use InepZend\UnitTest\AbstractUnitTest;

/**
 * Generated by PHPUnit_SkeletonGenerator
 */
class ArrayCollectionTest extends AbstractUnitTest
{

    /**
     * Generated from @assert (new \InepZend\Util\stdClass()) === array().
     *
     * @covers \InepZend\Util\ArrayCollection::objectToArray
     */
    public function testObjectToArray()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\ArrayCollection::objectToArray(new \InepZend\Util\stdClass())
        );
    }

    /**
     * Generated from @assert ((new \InepZend\Util\stdClass(array('chave' => 'valor')))) === array('chave' => 'valor').
     *
     * @covers \InepZend\Util\ArrayCollection::objectToArray
     */
    public function testObjectToArray2()
    {
        $this->assertSame(
                array('chave' => 'valor')
                , \InepZend\Util\ArrayCollection::objectToArray((new \InepZend\Util\stdClass(array('chave' => 'valor'))))
        );
    }

    /**
     * Generated from @assert (new \InepZend\Util\stdClass()) === array().
     *
     * @covers \InepZend\Util\ArrayCollection::objectToArrayRecursive
     */
    public function testObjectToArrayRecursive()
    {
        $this->assertSame(
                array()
                , \InepZend\Util\ArrayCollection::objectToArrayRecursive(new \InepZend\Util\stdClass())
        );
    }

    /**
     * Generated from @assert ((new \InepZend\Util\stdClass(array('atributo' => new \stdClass())))) === array('atributo' => array()).
     *
     * @covers \InepZend\Util\ArrayCollection::objectToArrayRecursive
     */
    public function testObjectToArrayRecursive2()
    {
        $this->assertSame(
                array('atributo' => array())
                , \InepZend\Util\ArrayCollection::objectToArrayRecursive((new \InepZend\Util\stdClass(array('atributo' => new \stdClass()))))
        );
    }

    /**
     * Generated from @assert (array(1, 2, 3, 4)) != array().
     *
     * @covers \InepZend\Util\ArrayCollection::randArray
     */
    public function testRandArray()
    {
        $this->assertNotEquals(
                array()
                , \InepZend\Util\ArrayCollection::randArray(array(1, 2, 3, 4))
        );
    }

    /**
     * Generated from @assert (array(1)) === 1.
     *
     * @covers \InepZend\Util\ArrayCollection::randArray
     */
    public function testRandArray2()
    {
        $this->assertSame(
                1
                , \InepZend\Util\ArrayCollection::randArray(array(1))
        );
    }

    /**
     * Generated from @assert (array("e10adc3949ba59abbe56e057f20f883e" => "MQ==", "caf1a3dfb505ffed0d024130f58c5cfa" => "MzIx"), array("123456")) === array("123456" => "1").
     *
     * @covers \InepZend\Util\ArrayCollection::decryptArray
     */
    public function testDecryptArray()
    {
        $this->assertSame(
                array("123456" => "1")
                , \InepZend\Util\ArrayCollection::decryptArray(array("e10adc3949ba59abbe56e057f20f883e" => "MQ==", "caf1a3dfb505ffed0d024130f58c5cfa" => "MzIx"), array("123456"))
        );
    }

    /**
     * Generated from @assert (array("Seu nome e O\'reilly!", "Tudo e d\'Ele?")) === array("Seu nome e O'reilly!", "Tudo e d'Ele?").
     *
     * @covers \InepZend\Util\ArrayCollection::stripslashesArray
     */
    public function testStripslashesArray()
    {
        $this->assertSame(
                array("Seu nome e O'reilly!", "Tudo e d'Ele?")
                , \InepZend\Util\ArrayCollection::stripslashesArray(array("Seu nome e O\'reilly!", "Tudo e d\'Ele?"))
        );
    }

    /**
     * Generated from @assert (array("Seu response.write e O\'reilly!", "SomeCustomInjectedHeader e passwd?", "Nao removido")) == array(0 => null, 1 => null, 2 => "Nao removido").
     *
     * @covers \InepZend\Util\ArrayCollection::removeBadWordArray
     */
    public function testRemoveBadWordArray()
    {
        $this->assertEquals(
                array(0 => null, 1 => null, 2 => "Nao removido")
                , \InepZend\Util\ArrayCollection::removeBadWordArray(array("Seu response.write e O\'reilly!", "SomeCustomInjectedHeader e passwd?", "Nao removido"))
        );
    }

    /**
     * Generated from @assert ('Testé') === 'Test&eacute;'.
     *
     * @covers \InepZend\Util\ArrayCollection::convertAccentIntoArray
     */
    public function testConvertAccentIntoArray()
    {
        $this->assertSame(
                'Test&eacute;'
                , \InepZend\Util\ArrayCollection::convertAccentIntoArray('Testé')
        );
    }

    /**
     * Generated from @assert (array("Testé")) === array("Test&eacute;").
     *
     * @covers \InepZend\Util\ArrayCollection::convertAccentIntoArray
     */
    public function testConvertAccentIntoArray2()
    {
        $this->assertSame(
                array("Test&eacute;")
                , \InepZend\Util\ArrayCollection::convertAccentIntoArray(array("Testé"))
        );
    }

    /**
     * Generated from @assert (array(array("Testé"))) === array(array("Test&eacute;")).
     *
     * @covers \InepZend\Util\ArrayCollection::convertAccentIntoArray
     */
    public function testConvertAccentIntoArray3()
    {
        $this->assertSame(
                array(array("Test&eacute;"))
                , \InepZend\Util\ArrayCollection::convertAccentIntoArray(array(array("Testé")))
        );
    }

    /**
     * Generated from @assert ("e", array("a", "e", 2)) === true.
     *
     * @covers \InepZend\Util\ArrayCollection::arraySearchMultiarray
     */
    public function testArraySearchMultiarray()
    {
        $this->assertSame(
                true
                , \InepZend\Util\ArrayCollection::arraySearchMultiarray("e", array("a", "e", 2))
        );
    }

    /**
     * Generated from @assert ("search", array("a", "e", "i", 'search')) === array(array('a'), array(3 => 'search')).
     *
     * @covers \InepZend\Util\ArrayCollection::arraySearchRecursive
     */
    public function testArraySearchRecursive()
    {
        $this->assertSame(
                array(array('a'), array(3 => 'search'))
                , \InepZend\Util\ArrayCollection::arraySearchRecursive("search", array("a", "e", "i", 'search'))
        );
    }

    /**
     * Generated from @assert ("searchOne", array(array("a", "e", 2, array("searchTwo", "searchOne")))) === true.
     *
     * @covers \InepZend\Util\ArrayCollection::arraySearchRecursive
     */
    public function testArraySearchRecursive2()
    {
        $this->assertSame(
                true
                , \InepZend\Util\ArrayCollection::arraySearchRecursive("searchOne", array(array("a", "e", 2, array("searchTwo", "searchOne"))))
        );
    }

    /**
     * Generated from @assert ("searchTree", array(array("a", "e", 2, array("searchTwo", "searchOne")))) === false.
     *
     * @covers \InepZend\Util\ArrayCollection::arraySearchRecursive
     */
    public function testArraySearchRecursive3()
    {
        $this->assertSame(
                false
                , \InepZend\Util\ArrayCollection::arraySearchRecursive("searchTree", array(array("a", "e", 2, array("searchTwo", "searchOne"))))
        );
    }

    /**
     * Generated from @assert (array("keyOriginal" => "valueOne", "name" => "valueTwo"), "keyOriginal", "keyUpdated") === array("keyUpdated" => "valueOne", "name" => "valueTwo").
     *
     * @covers \InepZend\Util\ArrayCollection::arrayRenameKey
     */
    public function testArrayRenameKey()
    {
        $this->assertSame(
                array("keyUpdated" => "valueOne", "name" => "valueTwo")
                , \InepZend\Util\ArrayCollection::arrayRenameKey(array("keyOriginal" => "valueOne", "name" => "valueTwo"), "keyOriginal", "keyUpdated")
        );
    }

    /**
     * Generated from @assert ('/SYSTEM/*', \InepZend\Util\FileSystem::getContentFromFile(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../config/complement/application.info.xml'))) === \InepZend\Util\ApplicationInfo::getApplicationInfo().
     *
     * @covers \InepZend\Util\ArrayCollection::convertXmlToArray
     */
    public function testConvertXmlToArray()
    {
        $this->assertSame(
                \InepZend\Util\ApplicationInfo::getApplicationInfo()
                , \InepZend\Util\ArrayCollection::convertXmlToArray('/SYSTEM/*', \InepZend\Util\FileSystem::getContentFromFile(\InepZend\Util\Server::getReplacedBasePathApplication('/../../../../../config/complement/application.info.xml')))
        );
    }

    /**
     * Generated from @assert (array("node" => "a")) === "<?xml version=\"1.0\"?>\n<root>\n<node>a</node>\n</root>".
     *
     * @covers \InepZend\Util\ArrayCollection::convertArrayToXml
     */
    public function testConvertArrayToXml()
    {
        $this->assertSame(
                "<?xml version=\"1.0\"?>\n<root>\n<node>a</node>\n</root>"
                , \InepZend\Util\ArrayCollection::convertArrayToXml(array("node" => "a"))
        );
    }

    /**
     * Generated from @assert (array()) == (new \InepZend\Util\stdClass()).
     *
     * @covers \InepZend\Util\ArrayCollection::arrayToObject
     */
    public function testArrayToObject()
    {
        $this->assertEquals(
                (new \InepZend\Util\stdClass())
                , \InepZend\Util\ArrayCollection::arrayToObject(array())
        );
    }

    /**
     * Generated from @assert ('<p>Test paragraph.</p><!-- Comment --> <a href="#fragment">Other text</a>') === 'Test paragraph. Other text'.
     *
     * @covers \InepZend\Util\ArrayCollection::stripTagsArray
     */
    public function testStripTagsArray()
    {
        $this->assertSame(
                'Test paragraph. Other text'
                , \InepZend\Util\ArrayCollection::stripTagsArray('<p>Test paragraph.</p><!-- Comment --> <a href="#fragment">Other text</a>')
        );
    }

    /**
     * Generated from @assert (array('<p>Test paragraph.</p><!-- Comment --> <a href="#fragment">Other text</a>')) === array('Test paragraph. Other text').
     *
     * @covers \InepZend\Util\ArrayCollection::stripTagsArray
     */
    public function testStripTagsArray2()
    {
        $this->assertSame(
                array('Test paragraph. Other text')
                , \InepZend\Util\ArrayCollection::stripTagsArray(array('<p>Test paragraph.</p><!-- Comment --> <a href="#fragment">Other text</a>'))
        );
    }

}
