<?php

namespace InepZend\Util;

use InepZend\UnitTest\AbstractUnitTest;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-23 at 14:54:07.
 */
class DateTest extends AbstractUnitTest
{

    /**
     * Generated from @assert ('18/07/2014') === true.
     *
     * @covers \InepZend\Util\Date::isDateTemplate
     */
    public function testIsDateTemplate()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDateTemplate('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') !== true.
     *
     * @covers \InepZend\Util\Date::isDateTemplate
     */
    public function testIsDateTemplate2()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateTemplate('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('20140718') !== true.
     *
     * @covers \InepZend\Util\Date::isDateTemplate
     */
    public function testIsDateTemplate3()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateTemplate('20140718')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === true.
     *
     * @covers \InepZend\Util\Date::isDateBase
     */
    public function testIsDateBase()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDateBase('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') !== true.
     *
     * @covers \InepZend\Util\Date::isDateBase
     */
    public function testIsDateBase2()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateBase('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('20140718') === true.
     *
     * @covers \InepZend\Util\Date::isDateWs
     */
    public function testIsDateWs()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDateWs('20140718')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') !== true.
     *
     * @covers \InepZend\Util\Date::isDateWs
     */
    public function testIsDateWs2()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateWs('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') !== true.
     *
     * @covers \InepZend\Util\Date::isDateWs
     */
    public function testIsDateWs3()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateWs('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('20140718 09:49:10') === true.
     *
     * @covers \InepZend\Util\Date::isDateWs
     */
    public function testIsDateWs4()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDateWs('20140718 09:49:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 09:49:10') !== true.
     *
     * @covers \InepZend\Util\Date::isDateWs
     */
    public function testIsDateWs5()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateWs('18/07/2014 09:49:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 09:49:10') !== true.
     *
     * @covers \InepZend\Util\Date::isDateWs
     */
    public function testIsDateWs6()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDateWs('2014-07-18 09:49:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'template') === true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDate('18/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'template') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate2()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('2014-07-18', 'template')
        );
    }

    /**
     * Generated from @assert ('20140718', 'template') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate3()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('20140718', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'base') === true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate4()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDate('2014-07-18', 'base')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'base') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate5()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('18/07/2014', 'base')
        );
    }

    /**
     * Generated from @assert ('20140718', 'base') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate6()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('20140718', 'base')
        );
    }

    /**
     * Generated from @assert ('20140718', 'ws') === true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate7()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::isDate('20140718', 'ws')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'ws') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate8()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('2014-07-18', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'teste') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate9()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('18/07/2014', 'teste')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'teste') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate10()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('2014-07-18', 'teste')
        );
    }

    /**
     * Generated from @assert ('20140718', 'teste') !== true.
     *
     * @covers \InepZend\Util\Date::isDate
     */
    public function testIsDate11()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Date::isDate('20140718', 'teste')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'template') === array(array(18, 7, 2014), array(0, 0, 0), 'd/m/Y', 'template').
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate()
    {
        $this->assertSame(
                array(array(18, 7, 2014), array(0, 0, 0), 'd/m/Y', 'template')
                , \InepZend\Util\Date::getInfoDate('18/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:36:15', 'template') === array(array(18, 7, 2014), array(18, 36, 15), 'd/m/Y H:i:s', 'template').
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate2()
    {
        $this->assertSame(
                array(array(18, 7, 2014), array(18, 36, 15), 'd/m/Y H:i:s', 'template')
                , \InepZend\Util\Date::getInfoDate('18/07/2014 18:36:15', 'template')
        );
    }

    /**
     * Generated from @assert ('32/07/2014', 'template') === null.
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate3()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::getInfoDate('32/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'base') === array(array(18, 7, 2014), array(0, 0, 0), 'Y-m-d', 'base').
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate4()
    {
        $this->assertSame(
                array(array(18, 7, 2014), array(0, 0, 0), 'Y-m-d', 'base')
                , \InepZend\Util\Date::getInfoDate('2014-07-18', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:36:15', 'base') === array(array(18, 7, 2014), array(18, 36, 15), 'Y-m-d H:i:s', 'base').
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate5()
    {
        $this->assertSame(
                array(array(18, 7, 2014), array(18, 36, 15), 'Y-m-d H:i:s', 'base')
                , \InepZend\Util\Date::getInfoDate('2014-07-18 18:36:15', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-14-32', 'base') === null.
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate6()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::getInfoDate('2014-14-32', 'base')
        );
    }

    /**
     * Generated from @assert ('20140718', 'ws') === array(0 => array(18, 7, 2014), 1 => array(0, 0, 0), 2 => 'Ymd', 3 => 'ws').
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate7()
    {
        $this->assertSame(
                array(0 => array(18, 7, 2014), 1 => array(0, 0, 0), 2 => 'Ymd', 3 => 'ws')
                , \InepZend\Util\Date::getInfoDate('20140718', 'ws')
        );
    }

    /**
     * Generated from @assert ('20140718 18:36:15', 'ws') === array(0 => array(18, 7, 2014), 1 => array(18, 36, 15), 2 => 'Ymd H:i:s', 3 => 'ws').
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate8()
    {
        $this->assertSame(
                array(0 => array(18, 7, 2014), 1 => array(18, 36, 15), 2 => 'Ymd H:i:s', 3 => 'ws')
                , \InepZend\Util\Date::getInfoDate('20140718 18:36:15', 'ws')
        );
    }

    /**
     * Generated from @assert ('20141432', 'ws') === null.
     *
     * @covers \InepZend\Util\Date::getInfoDate
     */
    public function testGetInfoDate9()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::getInfoDate('20141432', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y', 'type_intern' => 'template').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y', 'type_intern' => 'template')
                , \InepZend\Util\Date::getDateParse('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'template') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y', 'type_intern' => 'template').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse2()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y', 'type_intern' => 'template')
                , \InepZend\Util\Date::getDateParse('18/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 19:31:10', 'template') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => 19, 'minute' => 31, 'second' => 10, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y H:i:s', 'type_intern' => 'template').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse3()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => 19, 'minute' => 31, 'second' => 10, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y H:i:s', 'type_intern' => 'template')
                , \InepZend\Util\Date::getDateParse('18/07/2014 19:31:10', 'template')
        );
    }

    /**
     * Generated from @assert ('32/07/2014', 'template') === array('year' => 2014, 'month' => 7, 'day' => 32, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 1, 'warnings' => array(10 => 'The parsed date was invalid'), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y', 'type_intern' => 'template').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse4()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 32, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 1, 'warnings' => array(10 => 'The parsed date was invalid'), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'd/m/Y', 'type_intern' => 'template')
                , \InepZend\Util\Date::getDateParse('32/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('/07/2014', 'template') === array('year' => 2014, 'month' => 7, 'day' => false, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => '/m/Y', 'type_intern' => 'template').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse5()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => false, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => '/m/Y', 'type_intern' => 'template')
                , \InepZend\Util\Date::getDateParse('/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('07/2014', 'template') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse6()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d', 'type_intern' => 'base').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse7()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d', 'type_intern' => 'base')
                , \InepZend\Util\Date::getDateParse('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'base') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d', 'type_intern' => 'base').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse8()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d', 'type_intern' => 'base')
                , \InepZend\Util\Date::getDateParse('2014-07-18', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 19:31:10', 'base') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => 19, 'minute' => 31, 'second' => 10, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d H:i:s', 'type_intern' => 'base').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse9()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => 19, 'minute' => 31, 'second' => 10, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d H:i:s', 'type_intern' => 'base')
                , \InepZend\Util\Date::getDateParse('2014-07-18 19:31:10', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-32', 'base') === array('year' => 2014, 'month' => 7, 'day' => 32, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 1, 'warnings' => array(10 => 'The parsed date was invalid'), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d', 'type_intern' => 'base').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse10()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 32, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 1, 'warnings' => array(10 => 'The parsed date was invalid'), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-d', 'type_intern' => 'base')
                , \InepZend\Util\Date::getDateParse('2014-07-32', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-', 'base') === array('year' => 2014, 'month' => 7, 'day' => false, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-', 'type_intern' => 'base').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse11()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => false, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Y-m-', 'type_intern' => 'base')
                , \InepZend\Util\Date::getDateParse('2014-07-', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07', 'base') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse12()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('2014-07', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'template') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse13()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('2014-07-18', 'template')
        );
    }

    /**
     * Generated from @assert ('20140718') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd', 'type_intern' => 'ws').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse14()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd', 'type_intern' => 'ws')
                , \InepZend\Util\Date::getDateParse('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718', 'ws') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd', 'type_intern' => 'ws').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse15()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd', 'type_intern' => 'ws')
                , \InepZend\Util\Date::getDateParse('20140718', 'ws')
        );
    }

    /**
     * Generated from @assert ('20140718 11:15:10', 'ws') === array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => 11, 'minute' => 15, 'second' => 10, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd H:i:s', 'type_intern' => 'ws').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse16()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 18, 'hour' => 11, 'minute' => 15, 'second' => 10, 'fraction' => false, 'warning_count' => 0, 'warnings' => array(), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd H:i:s', 'type_intern' => 'ws')
                , \InepZend\Util\Date::getDateParse('20140718 11:15:10', 'ws')
        );
    }

    /**
     * Generated from @assert ('20140732', 'ws') === array('year' => 2014, 'month' => 7, 'day' => 32, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 1, 'warnings' => array(8 => 'The parsed date was invalid'), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd', 'type_intern' => 'ws').
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse17()
    {
        $this->assertSame(
                array('year' => 2014, 'month' => 7, 'day' => 32, 'hour' => false, 'minute' => false, 'second' => false, 'fraction' => false, 'warning_count' => 1, 'warnings' => array(8 => 'The parsed date was invalid'), 'error_count' => 0, 'errors' => array(), 'is_localtime' => false, 'format' => 'Ymd', 'type_intern' => 'ws')
                , \InepZend\Util\Date::getDateParse('20140732', 'ws')
        );
    }

    /**
     * Generated from @assert ('201407-', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse18()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('201407-', 'ws')
        );
    }

    /**
     * Generated from @assert ('201407', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse19()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('201407', 'ws')
        );
    }

    /**
     * Generated from @assert ('201407-18 19:31:10', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse20()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('201407-18 19:31:10', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse21()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('18/07/2014', 'ws')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateParse
     */
    public function testGetDateParse22()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateParse('2014-07-18', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'template') === array('d/m/Y', 'template').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat()
    {
        $this->assertSame(
                array('d/m/Y', 'template')
                , \InepZend\Util\Date::getDateFormat('18/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 14', 'template') === array('d/m/Y H', 'template').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat2()
    {
        $this->assertSame(
                array('d/m/Y H', 'template')
                , \InepZend\Util\Date::getDateFormat('18/07/2014 14', 'template')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 14:45', 'template') === array('d/m/Y H:i', 'template').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat3()
    {
        $this->assertSame(
                array('d/m/Y H:i', 'template')
                , \InepZend\Util\Date::getDateFormat('18/07/2014 14:45', 'template')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 14:45:10', 'template') === array('d/m/Y H:i:s', 'template').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat4()
    {
        $this->assertSame(
                array('d/m/Y H:i:s', 'template')
                , \InepZend\Util\Date::getDateFormat('18/07/2014 14:45:10', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'template') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat5()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('2014-07-18', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 14:45:10', 'template') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat6()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('2014-07-18 14:45:10', 'template')
        );
    }

    /**
     * Generated from @assert ('20140718', 'template') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat7()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('20140718', 'template')
        );
    }

    /**
     * Generated from @assert ('20140718 14:45:10', 'template') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat8()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('20140718 14:45:10', 'template')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'base') === array('Y-m-d', 'base').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat9()
    {
        $this->assertSame(
                array('Y-m-d', 'base')
                , \InepZend\Util\Date::getDateFormat('2014-07-18', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 14', 'base') === array('Y-m-d H', 'base').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat10()
    {
        $this->assertSame(
                array('Y-m-d H', 'base')
                , \InepZend\Util\Date::getDateFormat('2014-07-18 14', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 14:45', 'base') === array('Y-m-d H:i', 'base').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat11()
    {
        $this->assertSame(
                array('Y-m-d H:i', 'base')
                , \InepZend\Util\Date::getDateFormat('2014-07-18 14:45', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 14:45:10', 'base') === array('Y-m-d H:i:s', 'base').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat12()
    {
        $this->assertSame(
                array('Y-m-d H:i:s', 'base')
                , \InepZend\Util\Date::getDateFormat('2014-07-18 14:45:10', 'base')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'base') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat13()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('18/07/2014', 'base')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 14:45:10', 'base') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat14()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('18/07/2014 14:45:10', 'base')
        );
    }

    /**
     * Generated from @assert ('20140718', 'base') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat15()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('20140718', 'base')
        );
    }

    /**
     * Generated from @assert ('20140718 14:45:10', 'base') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat16()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('20140718 14:45:10', 'base')
        );
    }

    /**
     * Generated from @assert ('20140718', 'ws') === array('Ymd', 'ws').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat17()
    {
        $this->assertSame(
                array('Ymd', 'ws')
                , \InepZend\Util\Date::getDateFormat('20140718', 'ws')
        );
    }

    /**
     * Generated from @assert ('20140718 14', 'ws') === array('Ymd H', 'ws').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat18()
    {
        $this->assertSame(
                array('Ymd H', 'ws')
                , \InepZend\Util\Date::getDateFormat('20140718 14', 'ws')
        );
    }

    /**
     * Generated from @assert ('20140718 14:45', 'ws') === array('Ymd H:i', 'ws').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat19()
    {
        $this->assertSame(
                array('Ymd H:i', 'ws')
                , \InepZend\Util\Date::getDateFormat('20140718 14:45', 'ws')
        );
    }

    /**
     * Generated from @assert ('20140718 14:45:10', 'ws') === array('Ymd H:i:s', 'ws').
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat20()
    {
        $this->assertSame(
                array('Ymd H:i:s', 'ws')
                , \InepZend\Util\Date::getDateFormat('20140718 14:45:10', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat21()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('18/07/2014', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 14:45:10', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat22()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('18/07/2014 14:45:10', 'ws')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat23()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('2014-07-18', 'ws')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 14:45:10', 'ws') === false.
     *
     * @covers \InepZend\Util\Date::getDateFormat
     */
    public function testGetDateFormat24()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Date::getDateFormat('2014-07-18 14:45:10', 'ws')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateToTimestamp('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp2()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateToTimestamp('18/07/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp3()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateToTimestamp('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp4()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateToTimestamp('2014-07-18 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140718') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp5()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateToTimestamp('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp6()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateToTimestamp('20140718 18:45:10')
        );
    }

    /**
     * Generated from @assert ('teste') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestamp
     */
    public function testConvertDateToTimestamp7()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestamp('teste')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateTemplateToTimestamp
     */
    public function testConvertDateTemplateToTimestamp()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateTemplateToTimestamp('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateTemplateToTimestamp
     */
    public function testConvertDateTemplateToTimestamp2()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateTemplateToTimestamp('18/07/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplateToTimestamp
     */
    public function testConvertDateTemplateToTimestamp3()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplateToTimestamp('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplateToTimestamp
     */
    public function testConvertDateTemplateToTimestamp4()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplateToTimestamp('2014-07-18 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140718') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplateToTimestamp
     */
    public function testConvertDateTemplateToTimestamp5()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplateToTimestamp('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplateToTimestamp
     */
    public function testConvertDateTemplateToTimestamp6()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplateToTimestamp('20140718 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateBaseToTimestamp
     */
    public function testConvertDateBaseToTimestamp()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateBaseToTimestamp('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateBaseToTimestamp
     */
    public function testConvertDateBaseToTimestamp2()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateBaseToTimestamp('2014-07-18 18:45:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBaseToTimestamp
     */
    public function testConvertDateBaseToTimestamp3()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBaseToTimestamp('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBaseToTimestamp
     */
    public function testConvertDateBaseToTimestamp4()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBaseToTimestamp('18/07/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140718') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBaseToTimestamp
     */
    public function testConvertDateBaseToTimestamp5()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBaseToTimestamp('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBaseToTimestamp
     */
    public function testConvertDateBaseToTimestamp6()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBaseToTimestamp('20140718 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140718') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateWsToTimestamp
     */
    public function testConvertDateWsToTimestamp()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateWsToTimestamp('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateWsToTimestamp
     */
    public function testConvertDateWsToTimestamp2()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateWsToTimestamp('20140718 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWsToTimestamp
     */
    public function testConvertDateWsToTimestamp3()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWsToTimestamp('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWsToTimestamp
     */
    public function testConvertDateWsToTimestamp4()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWsToTimestamp('2014-07-18 18:45:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWsToTimestamp
     */
    public function testConvertDateWsToTimestamp5()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWsToTimestamp('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWsToTimestamp
     */
    public function testConvertDateWsToTimestamp6()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWsToTimestamp('18/07/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateToTimestampAction('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction2()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateToTimestampAction('18/07/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction3()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateToTimestampAction('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction4()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateToTimestampAction('2014-07-18 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140718') === 1405652400.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction5()
    {
        $this->assertSame(
                1405652400
                , \InepZend\Util\Date::convertDateToTimestampAction('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10') === 1405719910.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction6()
    {
        $this->assertSame(
                1405719910
                , \InepZend\Util\Date::convertDateToTimestampAction('20140718 18:45:10')
        );
    }

    /**
     * Generated from @assert ('32/07/2014') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction7()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestampAction('32/07/2014')
        );
    }

    /**
     * Generated from @assert ('31/32/2014 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction8()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestampAction('31/32/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-32') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction9()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestampAction('2014-07-32')
        );
    }

    /**
     * Generated from @assert ('2014-32-31 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction10()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestampAction('2014-32-31 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140732') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction11()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestampAction('20140732')
        );
    }

    /**
     * Generated from @assert ('20143231 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateToTimestampAction
     */
    public function testConvertDateToTimestampAction12()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateToTimestampAction('20143231 18:45:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'd/m/Y') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::convertDate('18/07/2014', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate2()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDate('18/07/2014 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'd/m/Y h:i:s') === '18/07/2014 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate3()
    {
        $this->assertSame(
                '18/07/2014 06:45:10'
                , \InepZend\Util\Date::convertDate('18/07/2014 18:45:10', 'd/m/Y h:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'Y-m-d') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate4()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::convertDate('18/07/2014', 'Y-m-d')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'Y-m-d H:i:s') === '2014-07-18 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate5()
    {
        $this->assertSame(
                '2014-07-18 18:45:10'
                , \InepZend\Util\Date::convertDate('18/07/2014 18:45:10', 'Y-m-d H:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'Y-m-d h:i:s') === '2014-07-18 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate6()
    {
        $this->assertSame(
                '2014-07-18 06:45:10'
                , \InepZend\Util\Date::convertDate('18/07/2014 18:45:10', 'Y-m-d h:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'Ymd') === '20140718'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate7()
    {
        $this->assertSame(
                '20140718'
                , \InepZend\Util\Date::convertDate('18/07/2014', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'Ymd H:i:s') === '20140718 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate8()
    {
        $this->assertSame(
                '20140718 18:45:10'
                , \InepZend\Util\Date::convertDate('18/07/2014 18:45:10', 'Ymd H:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'Ymd h:i:s') === '20140718 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate9()
    {
        $this->assertSame(
                '20140718 06:45:10'
                , \InepZend\Util\Date::convertDate('18/07/2014 18:45:10', 'Ymd h:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'd/m/Y') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate10()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::convertDate('2014-07-18', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate11()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDate('2014-07-18 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'd/m/Y h:i:s') === '18/07/2014 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate12()
    {
        $this->assertSame(
                '18/07/2014 06:45:10'
                , \InepZend\Util\Date::convertDate('2014-07-18 18:45:10', 'd/m/Y h:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'Y-m-d') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate13()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::convertDate('2014-07-18', 'Y-m-d')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'Y-m-d H:i:s') === '2014-07-18 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate14()
    {
        $this->assertSame(
                '2014-07-18 18:45:10'
                , \InepZend\Util\Date::convertDate('2014-07-18 18:45:10', 'Y-m-d H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'Y-m-d h:i:s') === '2014-07-18 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate15()
    {
        $this->assertSame(
                '2014-07-18 06:45:10'
                , \InepZend\Util\Date::convertDate('2014-07-18 18:45:10', 'Y-m-d h:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'Ymd') === '20140718'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate16()
    {
        $this->assertSame(
                '20140718'
                , \InepZend\Util\Date::convertDate('2014-07-18', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'Ymd H:i:s') === '20140718 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate17()
    {
        $this->assertSame(
                '20140718 18:45:10'
                , \InepZend\Util\Date::convertDate('2014-07-18 18:45:10', 'Ymd H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'Ymd h:i:s') === '20140718 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate18()
    {
        $this->assertSame(
                '20140718 06:45:10'
                , \InepZend\Util\Date::convertDate('2014-07-18 18:45:10', 'Ymd h:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718', 'd/m/Y') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate19()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::convertDate('20140718', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate20()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDate('20140718 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'd/m/Y h:i:s') === '18/07/2014 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate21()
    {
        $this->assertSame(
                '18/07/2014 06:45:10'
                , \InepZend\Util\Date::convertDate('20140718 18:45:10', 'd/m/Y h:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718', 'Y-m-d') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate22()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::convertDate('20140718', 'Y-m-d')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'Y-m-d H:i:s') === '2014-07-18 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate23()
    {
        $this->assertSame(
                '2014-07-18 18:45:10'
                , \InepZend\Util\Date::convertDate('20140718 18:45:10', 'Y-m-d H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'Y-m-d h:i:s') === '2014-07-18 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate24()
    {
        $this->assertSame(
                '2014-07-18 06:45:10'
                , \InepZend\Util\Date::convertDate('20140718 18:45:10', 'Y-m-d h:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718', 'Ymd') === '20140718'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate25()
    {
        $this->assertSame(
                '20140718'
                , \InepZend\Util\Date::convertDate('20140718', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'Ymd H:i:s') === '20140718 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate26()
    {
        $this->assertSame(
                '20140718 18:45:10'
                , \InepZend\Util\Date::convertDate('20140718 18:45:10', 'Ymd H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'Ymd h:i:s') === '20140718 06:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDate
     */
    public function testConvertDate27()
    {
        $this->assertSame(
                '20140718 06:45:10'
                , \InepZend\Util\Date::convertDate('20140718 18:45:10', 'Ymd h:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::convertDateTemplate('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'd/m/Y') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate2()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::convertDateTemplate('18/07/2014', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate3()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDateTemplate('18/07/2014 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate4()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplate('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate5()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplate('2014-07-18 18:45:10')
        );
    }

    /**
     * Generated from @assert ('20140718') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate6()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplate('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateTemplate
     */
    public function testConvertDateTemplate7()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateTemplate('20140718 18:45:10')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::convertDateBase('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase2()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDateBase('2014-07-18 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'Y-m-d') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase3()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::convertDateBase('2014-07-18', 'Y-m-d')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase4()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDateBase('2014-07-18 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'Ymd') === '20140718'.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase5()
    {
        $this->assertSame(
                '20140718'
                , \InepZend\Util\Date::convertDateBase('2014-07-18', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'Ymd H:i:s') === '20140718 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase6()
    {
        $this->assertSame(
                '20140718 18:45:10'
                , \InepZend\Util\Date::convertDateBase('2014-07-18 18:45:10', 'Ymd H:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase7()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBase('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'Y-m-d') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase8()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBase('18/07/2014', 'Y-m-d')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 'Ymd') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase9()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBase('18/07/2014', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('20140718') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase10()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBase('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718', 'Ymd') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase11()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBase('20140718', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'd/m/Y H:i:s') === null.
     *
     * @covers \InepZend\Util\Date::convertDateBase
     */
    public function testConvertDateBase12()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateBase('20140718 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::convertDateWs('20140718')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'd/m/Y H:i:s') === '18/07/2014 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs2()
    {
        $this->assertSame(
                '18/07/2014 18:45:10'
                , \InepZend\Util\Date::convertDateWs('20140718 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718', 'Y-m-d') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs3()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::convertDateWs('20140718', 'Y-m-d')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'Y-m-d H:i:s') === '2014-07-18 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs4()
    {
        $this->assertSame(
                '2014-07-18 18:45:10'
                , \InepZend\Util\Date::convertDateWs('20140718 18:45:10', 'Y-m-d H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140718', 'Ymd') === '20140718'.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs5()
    {
        $this->assertSame(
                '20140718'
                , \InepZend\Util\Date::convertDateWs('20140718', 'Ymd')
        );
    }

    /**
     * Generated from @assert ('20140718 18:45:10', 'Ymd H:i:s') === '20140718 18:45:10'.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs6()
    {
        $this->assertSame(
                '20140718 18:45:10'
                , \InepZend\Util\Date::convertDateWs('20140718 18:45:10', 'Ymd H:i:s')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs7()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWs('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 'd/m/Y') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs8()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWs('2014-07-18', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 18:45:10', 'd/m/Y H:i:s') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs9()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWs('2014-07-18 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs10()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWs('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs11()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWs('18/07/2014 18:45:10')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 18:45:10', 'd/m/Y H:i:s') === null.
     *
     * @covers \InepZend\Util\Date::convertDateWs
     */
    public function testConvertDateWs12()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateWs('18/07/2014 18:45:10', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('15/07/2014') === '2014-07-15'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction()
    {
        $this->assertSame(
                '2014-07-15'
                , \InepZend\Util\Date::convertDateAction('15/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-04-17') === '2014-04-17'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction2()
    {
        $this->assertSame(
                '2014-04-17'
                , \InepZend\Util\Date::convertDateAction('2014-04-17')
        );
    }

    /**
     * Generated from @assert ('20140417') === '2014-04-17'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction3()
    {
        $this->assertSame(
                '2014-04-17'
                , \InepZend\Util\Date::convertDateAction('20140417')
        );
    }

    /**
     * Generated from @assert ('15/07/2014', 'template') === '2014-07-15'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction4()
    {
        $this->assertSame(
                '2014-07-15'
                , \InepZend\Util\Date::convertDateAction('15/07/2014', 'template')
        );
    }

    /**
     * Generated from @assert ('15/07/2014', 'base') === null.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction5()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateAction('15/07/2014', 'base')
        );
    }

    /**
     * Generated from @assert ('2014-04-17', 'template', 'd/m/Y') === null.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction6()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateAction('2014-04-17', 'template', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('2014-04-17', 'base', 'd/m/Y') === '17/04/2014'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction7()
    {
        $this->assertSame(
                '17/04/2014'
                , \InepZend\Util\Date::convertDateAction('2014-04-17', 'base', 'd/m/Y')
        );
    }

    /**
     * Generated from @assert ('2014-04-17 12:15:14', 'base', 'd/m/Y H:i:s') === '17/04/2014 12:15:14'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction8()
    {
        $this->assertSame(
                '17/04/2014 12:15:14'
                , \InepZend\Util\Date::convertDateAction('2014-04-17 12:15:14', 'base', 'd/m/Y H:i:s')
        );
    }

    /**
     * Generated from @assert ('20140417', 'base') === null.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction9()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateAction('20140417', 'base')
        );
    }

    /**
     * Generated from @assert ('20140417', 'template') === null.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction10()
    {
        $this->assertSame(
                null
                , \InepZend\Util\Date::convertDateAction('20140417', 'template')
        );
    }

    /**
     * Generated from @assert ('20140417', 'ws') === '2014-04-17'.
     *
     * @covers \InepZend\Util\Date::convertDateAction
     */
    public function testConvertDateAction11()
    {
        $this->assertSame(
                '2014-04-17'
                , \InepZend\Util\Date::convertDateAction('20140417', 'ws')
        );
    }

    /**
     * Generated from @assert ('15/07/2014', 2) === '17/07/2014'.
     *
     * @covers \InepZend\Util\Date::addDayToDate
     */
    public function testAddDayToDate()
    {
        $this->assertSame(
                '17/07/2014'
                , \InepZend\Util\Date::addDayToDate('15/07/2014', 2)
        );
    }

    /**
     * Generated from @assert ('15/07/2014', 2, '-') === '13/07/2014'.
     *
     * @covers \InepZend\Util\Date::addDayToDate
     */
    public function testAddDayToDate2()
    {
        $this->assertSame(
                '13/07/2014'
                , \InepZend\Util\Date::addDayToDate('15/07/2014', 2, '-')
        );
    }

    /**
     * Generated from @assert ('2014-07-15', 2) === '2014-07-17'.
     *
     * @covers \InepZend\Util\Date::addDayToDate
     */
    public function testAddDayToDate3()
    {
        $this->assertSame(
                '2014-07-17'
                , \InepZend\Util\Date::addDayToDate('2014-07-15', 2)
        );
    }

    /**
     * Generated from @assert ('2014-07-15', 2, '-') === '2014-07-13'.
     *
     * @covers \InepZend\Util\Date::addDayToDate
     */
    public function testAddDayToDate4()
    {
        $this->assertSame(
                '2014-07-13'
                , \InepZend\Util\Date::addDayToDate('2014-07-15', 2, '-')
        );
    }

    /**
     * Generated from @assert ('20140715', 2) === '20140717'.
     *
     * @covers \InepZend\Util\Date::addDayToDate
     */
    public function testAddDayToDate5()
    {
        $this->assertSame(
                '20140717'
                , \InepZend\Util\Date::addDayToDate('20140715', 2)
        );
    }

    /**
     * Generated from @assert ('20140715', 2, '-') === '20140713'.
     *
     * @covers \InepZend\Util\Date::addDayToDate
     */
    public function testAddDayToDate6()
    {
        $this->assertSame(
                '20140713'
                , \InepZend\Util\Date::addDayToDate('20140715', 2, '-')
        );
    }

    /**
     * Generated from @assert ('15/07/2014 19:05:12', 2) === '15/07/2014 21:05:12'.
     *
     * @covers \InepZend\Util\Date::addHourToDate
     */
    public function testAddHourToDate()
    {
        $this->assertSame(
                '15/07/2014 21:05:12'
                , \InepZend\Util\Date::addHourToDate('15/07/2014 19:05:12', 2)
        );
    }

    /**
     * Generated from @assert ('15/07/2014 19:05:12', 2, '-') === '15/07/2014 17:05:12'.
     *
     * @covers \InepZend\Util\Date::addHourToDate
     */
    public function testAddHourToDate2()
    {
        $this->assertSame(
                '15/07/2014 17:05:12'
                , \InepZend\Util\Date::addHourToDate('15/07/2014 19:05:12', 2, '-')
        );
    }

    /**
     * Generated from @assert ('2014-07-15 19:05:12', 2) === '2014-07-15 21:05:12'.
     *
     * @covers \InepZend\Util\Date::addHourToDate
     */
    public function testAddHourToDate3()
    {
        $this->assertSame(
                '2014-07-15 21:05:12'
                , \InepZend\Util\Date::addHourToDate('2014-07-15 19:05:12', 2)
        );
    }

    /**
     * Generated from @assert ('2014-07-15 19:05:12', 2, '-') === '2014-07-15 17:05:12'.
     *
     * @covers \InepZend\Util\Date::addHourToDate
     */
    public function testAddHourToDate4()
    {
        $this->assertSame(
                '2014-07-15 17:05:12'
                , \InepZend\Util\Date::addHourToDate('2014-07-15 19:05:12', 2, '-')
        );
    }

    /**
     * Generated from @assert ('20140715 19:05:12', 2) === '20140715 21:05:12'.
     *
     * @covers \InepZend\Util\Date::addHourToDate
     */
    public function testAddHourToDate5()
    {
        $this->assertSame(
                '20140715 21:05:12'
                , \InepZend\Util\Date::addHourToDate('20140715 19:05:12', 2)
        );
    }

    /**
     * Generated from @assert ('20140715 19:05:12', 2, '-') === '20140715 17:05:12'.
     *
     * @covers \InepZend\Util\Date::addHourToDate
     */
    public function testAddHourToDate6()
    {
        $this->assertSame(
                '20140715 17:05:12'
                , \InepZend\Util\Date::addHourToDate('20140715 19:05:12', 2, '-')
        );
    }

    /**
     * Generated from @assert ('15/07/2014 19:05:12', 2) === '15/07/2014 19:07:12'.
     *
     * @covers \InepZend\Util\Date::addMinuteToDate
     */
    public function testAddMinuteToDate()
    {
        $this->assertSame(
                '15/07/2014 19:07:12'
                , \InepZend\Util\Date::addMinuteToDate('15/07/2014 19:05:12', 2)
        );
    }

    /**
     * Generated from @assert ('15/07/2014 19:05:12', 2, '-') === '15/07/2014 19:03:12'.
     *
     * @covers \InepZend\Util\Date::addMinuteToDate
     */
    public function testAddMinuteToDate2()
    {
        $this->assertSame(
                '15/07/2014 19:03:12'
                , \InepZend\Util\Date::addMinuteToDate('15/07/2014 19:05:12', 2, '-')
        );
    }

    /**
     * Generated from @assert ('2014-07-15 19:05:12', 2) === '2014-07-15 19:07:12'.
     *
     * @covers \InepZend\Util\Date::addMinuteToDate
     */
    public function testAddMinuteToDate3()
    {
        $this->assertSame(
                '2014-07-15 19:07:12'
                , \InepZend\Util\Date::addMinuteToDate('2014-07-15 19:05:12', 2)
        );
    }

    /**
     * Generated from @assert ('2014-07-15 19:05:12', 2, '-') === '2014-07-15 19:03:12'.
     *
     * @covers \InepZend\Util\Date::addMinuteToDate
     */
    public function testAddMinuteToDate4()
    {
        $this->assertSame(
                '2014-07-15 19:03:12'
                , \InepZend\Util\Date::addMinuteToDate('2014-07-15 19:05:12', 2, '-')
        );
    }

    /**
     * Generated from @assert ('20140715 19:05:12', 2) === '20140715 19:07:12'.
     *
     * @covers \InepZend\Util\Date::addMinuteToDate
     */
    public function testAddMinuteToDate5()
    {
        $this->assertSame(
                '20140715 19:07:12'
                , \InepZend\Util\Date::addMinuteToDate('20140715 19:05:12', 2)
        );
    }

    /**
     * Generated from @assert ('20140715 19:05:12', 2, '-') === '20140715 19:03:12'.
     *
     * @covers \InepZend\Util\Date::addMinuteToDate
     */
    public function testAddMinuteToDate6()
    {
        $this->assertSame(
                '20140715 19:03:12'
                , \InepZend\Util\Date::addMinuteToDate('20140715 19:05:12', 2, '-')
        );
    }

    /**
     * Generated from @assert ('18/07/2014') === '18/07/2014'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate()
    {
        $this->assertSame(
                '18/07/2014'
                , \InepZend\Util\Date::alterDate('18/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-07-18') === '2014-07-18'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate2()
    {
        $this->assertSame(
                '2014-07-18'
                , \InepZend\Util\Date::alterDate('2014-07-18')
        );
    }

    /**
     * Generated from @assert ('20140718') === '20140718'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate3()
    {
        $this->assertSame(
                '20140718'
                , \InepZend\Util\Date::alterDate('20140718')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', 1) === '19/07/2014'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate4()
    {
        $this->assertSame(
                '19/07/2014'
                , \InepZend\Util\Date::alterDate('18/07/2014', 1)
        );
    }

    /**
     * Generated from @assert ('2014-07-18', 1) === '2014-07-19'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate5()
    {
        $this->assertSame(
                '2014-07-19'
                , \InepZend\Util\Date::alterDate('2014-07-18', 1)
        );
    }

    /**
     * Generated from @assert ('20140718', 1) === '20140719'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate6()
    {
        $this->assertSame(
                '20140719'
                , \InepZend\Util\Date::alterDate('20140718', 1)
        );
    }

    /**
     * Generated from @assert ('18/07/2014 11:15:12', 1, null, 'hour') === '18/07/2014 12:15:12'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate7()
    {
        $this->assertSame(
                '18/07/2014 12:15:12'
                , \InepZend\Util\Date::alterDate('18/07/2014 11:15:12', 1, null, 'hour')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 11:15:12', 1, null, 'hour') === '2014-07-18 12:15:12'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate8()
    {
        $this->assertSame(
                '2014-07-18 12:15:12'
                , \InepZend\Util\Date::alterDate('2014-07-18 11:15:12', 1, null, 'hour')
        );
    }

    /**
     * Generated from @assert ('20140718 11:15:12', 1, null, 'hour') === '20140718 12:15:12'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate9()
    {
        $this->assertSame(
                '20140718 12:15:12'
                , \InepZend\Util\Date::alterDate('20140718 11:15:12', 1, null, 'hour')
        );
    }

    /**
     * Generated from @assert ('18/07/2014 11:15:12', 1, null, 'hour') === '18/07/2014 12:15:12'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate10()
    {
        $this->assertSame(
                '18/07/2014 12:15:12'
                , \InepZend\Util\Date::alterDate('18/07/2014 11:15:12', 1, null, 'hour')
        );
    }

    /**
     * Generated from @assert ('2014-07-18 11:15:12', 1, null, 'hour') === '2014-07-18 12:15:12'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate11()
    {
        $this->assertSame(
                '2014-07-18 12:15:12'
                , \InepZend\Util\Date::alterDate('2014-07-18 11:15:12', 1, null, 'hour')
        );
    }

    /**
     * Generated from @assert ('20140718 11:15:12', 1, null, 'hour') === '20140718 12:15:12'.
     *
     * @covers \InepZend\Util\Date::alterDate
     */
    public function testAlterDate12()
    {
        $this->assertSame(
                '20140718 12:15:12'
                , \InepZend\Util\Date::alterDate('20140718 11:15:12', 1, null, 'hour')
        );
    }

    /**
     * Generated from @assert ('23/07/2014', '25/07/2014') === 2.0.
     *
     * @covers \InepZend\Util\Date::dateDiff
     */
    public function testDateDiff()
    {
        $this->assertSame(
                2.0
                , \InepZend\Util\Date::dateDiff('23/07/2014', '25/07/2014')
        );
    }

    /**
     * Generated from @assert ('23/07/2014', '25/07/2014') === 2.0.
     *
     * @covers \InepZend\Util\Date::dateDiff
     */
    public function testDateDiff2()
    {
        $this->assertSame(
                2.0
                , \InepZend\Util\Date::dateDiff('23/07/2014', '25/07/2014')
        );
    }

    /**
     * Generated from @assert ('31/07/2014', '25/07/2014', true) === 6.0.
     *
     * @covers \InepZend\Util\Date::dateDiff
     */
    public function testDateDiff3()
    {
        $this->assertSame(
                6.0
                , \InepZend\Util\Date::dateDiff('31/07/2014', '25/07/2014', true)
        );
    }

    /**
     * Generated from @assert ('23/07/2014', '25/07/2014') === true.
     *
     * @covers \InepZend\Util\Date::compareDates
     */
    public function testCompareDates()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::compareDates('23/07/2014', '25/07/2014')
        );
    }

    /**
     * Generated from @assert ('23/07/2014', '24/07/2014') === true.
     *
     * @covers \InepZend\Util\Date::compareDates
     */
    public function testCompareDates2()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::compareDates('23/07/2014', '24/07/2014')
        );
    }

    /**
     * Generated from @assert ('23/07/2014 14:25:26', '25/07/2014 14:25:27') === true.
     *
     * @covers \InepZend\Util\Date::compareDates
     */
    public function testCompareDates3()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::compareDates('23/07/2014 14:25:26', '25/07/2014 14:25:27')
        );
    }

    /**
     * Generated from @assert ('23/07/2014 14:25:26', '24/07/2014 14:25:23') === true.
     *
     * @covers \InepZend\Util\Date::compareDates
     */
    public function testCompareDates4()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Date::compareDates('23/07/2014 14:25:26', '24/07/2014 14:25:23')
        );
    }

    /**
     * Generated from @assert ('26/07/2014') === '28/07/2014'.
     *
     * @covers \InepZend\Util\Date::nextDayNotWeekend
     */
    public function testNextDayNotWeekend()
    {
        $this->assertSame(
                '28/07/2014'
                , \InepZend\Util\Date::nextDayNotWeekend('26/07/2014')
        );
    }

    /**
     * Generated from @assert ('23/07/2014') === '23/07/2014'.
     *
     * @covers \InepZend\Util\Date::nextDayNotWeekend
     */
    public function testNextDayNotWeekend2()
    {
        $this->assertSame(
                '23/07/2014'
                , \InepZend\Util\Date::nextDayNotWeekend('23/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-07-26') === '2014-07-28'.
     *
     * @covers \InepZend\Util\Date::nextDayNotWeekend
     */
    public function testNextDayNotWeekend3()
    {
        $this->assertSame(
                '2014-07-28'
                , \InepZend\Util\Date::nextDayNotWeekend('2014-07-26')
        );
    }

    /**
     * Generated from @assert ('2014-07-23') === '2014-07-23'.
     *
     * @covers \InepZend\Util\Date::nextDayNotWeekend
     */
    public function testNextDayNotWeekend4()
    {
        $this->assertSame(
                '2014-07-23'
                , \InepZend\Util\Date::nextDayNotWeekend('2014-07-23')
        );
    }

    /**
     * Generated from @assert ('20140726') === '20140728'.
     *
     * @covers \InepZend\Util\Date::nextDayNotWeekend
     */
    public function testNextDayNotWeekend5()
    {
        $this->assertSame(
                '20140728'
                , \InepZend\Util\Date::nextDayNotWeekend('20140726')
        );
    }

    /**
     * Generated from @assert ('20140723') === '20140723'.
     *
     * @covers \InepZend\Util\Date::nextDayNotWeekend
     */
    public function testNextDayNotWeekend6()
    {
        $this->assertSame(
                '20140723'
                , \InepZend\Util\Date::nextDayNotWeekend('20140723')
        );
    }

    /**
     * Generated from @assert (1) === 'segunda-feira'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday()
    {
        $this->assertSame(
                'segunda-feira'
                , \InepZend\Util\Date::getWeekday(1)
        );
    }

    /**
     * Generated from @assert (2) === 'ter&ccedil;a-feira'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday2()
    {
        $this->assertSame(
                'ter&ccedil;a-feira'
                , \InepZend\Util\Date::getWeekday(2)
        );
    }

    /**
     * Generated from @assert (3) === 'quarta-feira'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday3()
    {
        $this->assertSame(
                'quarta-feira'
                , \InepZend\Util\Date::getWeekday(3)
        );
    }

    /**
     * Generated from @assert (4) === 'quinta-feira'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday4()
    {
        $this->assertSame(
                'quinta-feira'
                , \InepZend\Util\Date::getWeekday(4)
        );
    }

    /**
     * Generated from @assert (5) === 'sexta-feira'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday5()
    {
        $this->assertSame(
                'sexta-feira'
                , \InepZend\Util\Date::getWeekday(5)
        );
    }

    /**
     * Generated from @assert (6) === 's&aacute;bado'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday6()
    {
        $this->assertSame(
                's&aacute;bado'
                , \InepZend\Util\Date::getWeekday(6)
        );
    }

    /**
     * Generated from @assert (7) === 'domingo'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday7()
    {
        $this->assertSame(
                'domingo'
                , \InepZend\Util\Date::getWeekday(7)
        );
    }

    /**
     * Generated from @assert (1, true) === 'seg'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday8()
    {
        $this->assertSame(
                'seg'
                , \InepZend\Util\Date::getWeekday(1, true)
        );
    }

    /**
     * Generated from @assert (2, true) === 'ter'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday9()
    {
        $this->assertSame(
                'ter'
                , \InepZend\Util\Date::getWeekday(2, true)
        );
    }

    /**
     * Generated from @assert (3, true) === 'qua'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday10()
    {
        $this->assertSame(
                'qua'
                , \InepZend\Util\Date::getWeekday(3, true)
        );
    }

    /**
     * Generated from @assert (4, true) === 'qui'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday11()
    {
        $this->assertSame(
                'qui'
                , \InepZend\Util\Date::getWeekday(4, true)
        );
    }

    /**
     * Generated from @assert (5, true) === 'sex'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday12()
    {
        $this->assertSame(
                'sex'
                , \InepZend\Util\Date::getWeekday(5, true)
        );
    }

    /**
     * Generated from @assert (6, true) === 'sab'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday13()
    {
        $this->assertSame(
                'sab'
                , \InepZend\Util\Date::getWeekday(6, true)
        );
    }

    /**
     * Generated from @assert (7, true) === 'dom'.
     *
     * @covers \InepZend\Util\Date::getWeekday
     */
    public function testGetWeekday14()
    {
        $this->assertSame(
                'dom'
                , \InepZend\Util\Date::getWeekday(7, true)
        );
    }

    /**
     * Generated from @assert (1) === 'janeiro'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth()
    {
        $this->assertSame(
                'janeiro'
                , \InepZend\Util\Date::getPortugueseMonth(1)
        );
    }

    /**
     * Generated from @assert (2) === 'fevereiro'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth2()
    {
        $this->assertSame(
                'fevereiro'
                , \InepZend\Util\Date::getPortugueseMonth(2)
        );
    }

    /**
     * Generated from @assert (3) === 'mar&ccedil;o'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth3()
    {
        $this->assertSame(
                'mar&ccedil;o'
                , \InepZend\Util\Date::getPortugueseMonth(3)
        );
    }

    /**
     * Generated from @assert (4) === 'abril'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth4()
    {
        $this->assertSame(
                'abril'
                , \InepZend\Util\Date::getPortugueseMonth(4)
        );
    }

    /**
     * Generated from @assert (5) === 'maio'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth5()
    {
        $this->assertSame(
                'maio'
                , \InepZend\Util\Date::getPortugueseMonth(5)
        );
    }

    /**
     * Generated from @assert (6) === 'junho'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth6()
    {
        $this->assertSame(
                'junho'
                , \InepZend\Util\Date::getPortugueseMonth(6)
        );
    }

    /**
     * Generated from @assert (7) === 'julho'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth7()
    {
        $this->assertSame(
                'julho'
                , \InepZend\Util\Date::getPortugueseMonth(7)
        );
    }

    /**
     * Generated from @assert (8) === 'agosto'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth8()
    {
        $this->assertSame(
                'agosto'
                , \InepZend\Util\Date::getPortugueseMonth(8)
        );
    }

    /**
     * Generated from @assert (9) === 'setembro'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth9()
    {
        $this->assertSame(
                'setembro'
                , \InepZend\Util\Date::getPortugueseMonth(9)
        );
    }

    /**
     * Generated from @assert (10) === 'outubro'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth10()
    {
        $this->assertSame(
                'outubro'
                , \InepZend\Util\Date::getPortugueseMonth(10)
        );
    }

    /**
     * Generated from @assert (11) === 'novembro'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth11()
    {
        $this->assertSame(
                'novembro'
                , \InepZend\Util\Date::getPortugueseMonth(11)
        );
    }

    /**
     * Generated from @assert (12) === 'dezembro'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth12()
    {
        $this->assertSame(
                'dezembro'
                , \InepZend\Util\Date::getPortugueseMonth(12)
        );
    }

    /**
     * Generated from @assert (1, 'en') === 'january'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth13()
    {
        $this->assertSame(
                'january'
                , \InepZend\Util\Date::getPortugueseMonth(1, 'en')
        );
    }

    /**
     * Generated from @assert (2, 'en') === 'february'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth14()
    {
        $this->assertSame(
                'february'
                , \InepZend\Util\Date::getPortugueseMonth(2, 'en')
        );
    }

    /**
     * Generated from @assert (3, 'en') === 'march'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth15()
    {
        $this->assertSame(
                'march'
                , \InepZend\Util\Date::getPortugueseMonth(3, 'en')
        );
    }

    /**
     * Generated from @assert (4, 'en') === 'april'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth16()
    {
        $this->assertSame(
                'april'
                , \InepZend\Util\Date::getPortugueseMonth(4, 'en')
        );
    }

    /**
     * Generated from @assert (5, 'en') === 'may'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth17()
    {
        $this->assertSame(
                'may'
                , \InepZend\Util\Date::getPortugueseMonth(5, 'en')
        );
    }

    /**
     * Generated from @assert (6, 'en') === 'june'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth18()
    {
        $this->assertSame(
                'june'
                , \InepZend\Util\Date::getPortugueseMonth(6, 'en')
        );
    }

    /**
     * Generated from @assert (7, 'en') === 'july'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth19()
    {
        $this->assertSame(
                'july'
                , \InepZend\Util\Date::getPortugueseMonth(7, 'en')
        );
    }

    /**
     * Generated from @assert (8, 'en') === 'august'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth20()
    {
        $this->assertSame(
                'august'
                , \InepZend\Util\Date::getPortugueseMonth(8, 'en')
        );
    }

    /**
     * Generated from @assert (9, 'en') === 'september'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth21()
    {
        $this->assertSame(
                'september'
                , \InepZend\Util\Date::getPortugueseMonth(9, 'en')
        );
    }

    /**
     * Generated from @assert (10, 'en') === 'october'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth22()
    {
        $this->assertSame(
                'october'
                , \InepZend\Util\Date::getPortugueseMonth(10, 'en')
        );
    }

    /**
     * Generated from @assert (11, 'en') === 'november'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth23()
    {
        $this->assertSame(
                'november'
                , \InepZend\Util\Date::getPortugueseMonth(11, 'en')
        );
    }

    /**
     * Generated from @assert (12, 'en') === 'december'.
     *
     * @covers \InepZend\Util\Date::getPortugueseMonth
     */
    public function testGetPortugueseMonth24()
    {
        $this->assertSame(
                'december'
                , \InepZend\Util\Date::getPortugueseMonth(12, 'en')
        );
    }

    /**
     * Generated from @assert ('18/07/2014', '25/07/2014') === array(0 => '18/07/2014', 1 => '19/07/2014', 2 => '20/07/2014', 3 => '21/07/2014', 4 => '22/07/2014', 5 => '23/07/2014', 6 => '24/07/2014', 7 => '25/07/2014').
     *
     * @covers \InepZend\Util\Date::listDatesOfPeriod
     */
    public function testListDatesOfPeriod()
    {
        $this->assertSame(
                array(0 => '18/07/2014', 1 => '19/07/2014', 2 => '20/07/2014', 3 => '21/07/2014', 4 => '22/07/2014', 5 => '23/07/2014', 6 => '24/07/2014', 7 => '25/07/2014')
                , \InepZend\Util\Date::listDatesOfPeriod('18/07/2014', '25/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-07-18', '2014-07-25') === array(0 => '2014-07-18', 1 => '2014-07-19', 2 => '2014-07-20', 3 => '2014-07-21', 4 => '2014-07-22', 5 => '2014-07-23', 6 => '2014-07-24', 7 => '2014-07-25').
     *
     * @covers \InepZend\Util\Date::listDatesOfPeriod
     */
    public function testListDatesOfPeriod2()
    {
        $this->assertSame(
                array(0 => '2014-07-18', 1 => '2014-07-19', 2 => '2014-07-20', 3 => '2014-07-21', 4 => '2014-07-22', 5 => '2014-07-23', 6 => '2014-07-24', 7 => '2014-07-25')
                , \InepZend\Util\Date::listDatesOfPeriod('2014-07-18', '2014-07-25')
        );
    }

    /**
     * Generated from @assert ('20140718', '20140725') === array(0 => '20140718', 1 => '20140719', 2 => '20140720', 3 => '20140721', 4 => '20140722', 5 => '20140723', 6 => '20140724', 7 => '20140725').
     *
     * @covers \InepZend\Util\Date::listDatesOfPeriod
     */
    public function testListDatesOfPeriod3()
    {
        $this->assertSame(
                array(0 => '20140718', 1 => '20140719', 2 => '20140720', 3 => '20140721', 4 => '20140722', 5 => '20140723', 6 => '20140724', 7 => '20140725')
                , \InepZend\Util\Date::listDatesOfPeriod('20140718', '20140725')
        );
    }

    /**
     * Generated from @assert ('25/07/2014', '18/07/2014') === array(0 => '18/07/2014', 1 => '19/07/2014', 2 => '20/07/2014', 3 => '21/07/2014', 4 => '22/07/2014', 5 => '23/07/2014', 6 => '24/07/2014', 7 => '25/07/2014').
     *
     * @covers \InepZend\Util\Date::listDatesOfPeriod
     */
    public function testListDatesOfPeriod4()
    {
        $this->assertSame(
                array(0 => '18/07/2014', 1 => '19/07/2014', 2 => '20/07/2014', 3 => '21/07/2014', 4 => '22/07/2014', 5 => '23/07/2014', 6 => '24/07/2014', 7 => '25/07/2014')
                , \InepZend\Util\Date::listDatesOfPeriod('25/07/2014', '18/07/2014')
        );
    }

    /**
     * Generated from @assert ('2014-07-25', '2014-07-18') === array(0 => '2014-07-18', 1 => '2014-07-19', 2 => '2014-07-20', 3 => '2014-07-21', 4 => '2014-07-22', 5 => '2014-07-23', 6 => '2014-07-24', 7 => '2014-07-25').
     *
     * @covers \InepZend\Util\Date::listDatesOfPeriod
     */
    public function testListDatesOfPeriod5()
    {
        $this->assertSame(
                array(0 => '2014-07-18', 1 => '2014-07-19', 2 => '2014-07-20', 3 => '2014-07-21', 4 => '2014-07-22', 5 => '2014-07-23', 6 => '2014-07-24', 7 => '2014-07-25')
                , \InepZend\Util\Date::listDatesOfPeriod('2014-07-25', '2014-07-18')
        );
    }

    /**
     * Generated from @assert ('20140725', '20140718') === array(0 => '20140718', 1 => '20140719', 2 => '20140720', 3 => '20140721', 4 => '20140722', 5 => '20140723', 6 => '20140724', 7 => '20140725').
     *
     * @covers \InepZend\Util\Date::listDatesOfPeriod
     */
    public function testListDatesOfPeriod6()
    {
        $this->assertSame(
                array(0 => '20140718', 1 => '20140719', 2 => '20140720', 3 => '20140721', 4 => '20140722', 5 => '20140723', 6 => '20140724', 7 => '20140725')
                , \InepZend\Util\Date::listDatesOfPeriod('20140725', '20140718')
        );
    }

}
