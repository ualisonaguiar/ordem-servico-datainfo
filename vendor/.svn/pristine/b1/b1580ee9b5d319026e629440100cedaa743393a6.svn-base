<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Repository</title>
<link rel="stylesheet" href="https://stackedit.io/res-min/themes/default.css" />
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body><div class="container"><h1 id="repository"><strong><i class="icon-folder-open"></i> Repository</strong></h1>



<h2 id="1-índice">1. Índice</h2>

<p><div class="toc">
<ul>
<li><a href="#repository"> Repository</a><ul>
<li><a href="#1-índice">1. Índice</a></li>
<li><a href="#2-definição"> 2. Definição</a><ul>
<li><a href="#21-conceito"> 2.1. Conceito</a><ul>
<li><a href="#211-repository">2.1.1 Repository</a></li>
<li><a href="#212-principais-características">2.1.2 Principais Características</a></li>
</ul>
</li>
<li><a href="#22-principais-características"> 2.2. Principais características</a><ul>
<li><a href="#221-classes">2.2.1. Classes</a></li>
<li><a href="#222-estrutura-hierárquica">2.2.2. Estrutura hierárquica</a><ul>
<li><a href="#2221-o-uso-das-classes-inepzendrepository">2.2.2.1. O uso das classes \InepZend\Repository</a><ul>
<li><a href="#22211-abstractrepositorycore">2.2.2.1.1. AbstractRepositoryCore</a></li>
<li><a href="#22212-abstractrepositoryentitymanager">2.2.2.1.2. AbstractRepositoryEntityManager</a></li>
<li><a href="#22213-abstractrepositoryquery">2.2.2.1.3. AbstractRepositoryQuery</a></li>
<li><a href="#22214-abstractrepositorycommand">2.2.2.1.4. AbstractRepositoryCommand</a></li>
<li><a href="#22215-abstractrepository">2.2.2.1.5. AbstractRepository</a></li>
<li><a href="#22216-repository">2.2.2.1.6. Repository</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#223-namespace"> 2.2.3. Namespace</a></li>
</ul>
</li>
<li><a href="#23-apidocunittest"> 2.3. APIDoc/UnitTest</a></li>
</ul>
</li>
<li><a href="#3-como-usar"> 3. Como usar</a><ul>
<li><a href="#31-onde-utilizar-o-componente">3.1. Onde utilizar o componente</a><ul>
<li><a href="#311-camadas">3.1.1 Camadas</a></li>
</ul>
</li>
<li><a href="#32-utilizando-o-componente">3.2. Utilizando o componente</a><ul>
<li><a href="#321-executando-os-métodos-da-repository">3.2.1 Executando os métodos da Repository</a><ul>
<li><a href="#3211-retornando-doctrineormquerybuilder">3.2.1.1 Retornando Doctrine\ORM\QueryBuilder;</a></li>
<li><a href="#3212-retornando-doctrineormquery">3.2.1.2 Retornando Doctrine\ORM\Query</a></li>
<li><a href="#3213-retornando-doctrineormnativequery">3.2.1.3 Retornando Doctrine\ORM\NativeQuery</a></li>
<li><a href="#3214-retornando-doctrinedbalstatement">3.2.1.4 Retornando Doctrine\DBAL\Statement</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-referência">  4. Referência </a></li>
</ul>
</li>
</ul>
</div>
</p>



<h2 id="2-definição"><i class="icon-th"></i> 2. Definição</h2>

<hr>



<h3 id="21-conceito"><i class="icon-pencil"></i> 2.1. Conceito</h3>

<blockquote>
  <p>O componente <strong>Repository</strong> é responsável pelos principais métodos utilizados na camada “<strong>M</strong>” (Model) do Design Pattern “<strong>MVC</strong>” que realiza iterações diretamente com o SGDB via <a href="http://www.doctrine-project.org/" target="_blank">Doctrine</a>.</p>
</blockquote>

<p><a id="definicao"></a></p>



<h4 id="211-repository"><strong>2.1.1 Repository</strong></h4>

<ul>
<li>Repository ou Repositório é um padrão de projeto definido por Martin Fowler e utilizado nas principais frameworks de desenvolvimento com as seguintes características: <br>
<ul><li>Realiza a mediação entre as camadas de domínio e mapeamento de dados, agindo como uma coleção de objetos do domínio <em>in-memory</em>;</li>
<li>Encapsula o conjunto de objetos persistidos em um armazenamento de dados e as operações realizadas sobre eles, proporcionando uma visão mais orientada a objetos da camada de persistência;</li>
<li>Apoia o objetivo de alcançar uma separação limpa de dependência de uma via entre as camadas de domínio e mapeamento de dados;</li>
<li>[ <a href="http://martinfowler.com/eaaCatalog/repository.html">http://martinfowler.com/eaaCatalog/repository.html</a> ]</li></ul></li>
</ul>

<p><a id="caracteristicas"></a></p>



<h4 id="212-principais-características"><strong>2.1.2 Principais Características</strong></h4>

<ul>
<li>O componente Repository é responsável em realizar a transação entre a Service e o Banco de Dados disponibilizando classes e métodos específicos na qual realizam as principais operações como por exemplo: <br>
<ul><li>Para CRUD: <br>
<ul><li>Insert, Update, Delete, Find, FindBy, FetchPairs, etc.</li>
<li>Retorno de dados passíveis de paginação do componente <a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html" target="_blank">Paginator</a>: <br>
<ul><li>FindByPaged;</li></ul></li></ul></li>
<li>Execução de Querys: <br>
<ul><li>ExecuteQuery, ExecuteDQL, ExecuteSQL, etc.</li></ul></li>
<li>Específicos para transações: <br>
<ul><li>Begin, Commit, Rollback, etc.</li></ul></li></ul></li>
<li>Ao estender uma das classes da Repository e definindo os métodos criados com a visibilidade de acesso protegidos (<strong>protected</strong>) os mesmos serão passíveis de <strong>auditoria</strong>. </li>
</ul>



<h3 id="22-principais-características"><a id="principais-caracteristicas"></a><i class="icon-info"></i> 2.2. Principais características</h3>



<h4 id="221-classes">2.2.1. Classes</h4>

<blockquote>
  <ul>
  <li>Classes:  <br>
  <ul><li>InepZend\Repository\AbstractRepositoryCore</li>
  <li>InepZend\Repository\AbstractRepositoryEntityManager</li>
  <li>InepZend\Repository\AbstractRepositoryQuery</li>
  <li>InepZend\Repository\AbstractRepositoryCommand</li>
  <li>InepZend\Repository\AbstractRepository</li>
  <li>InepZend\Repository\Repository</li></ul></li>
  </ul>
</blockquote>

<p><a id="hierarquia"></a></p>



<h4 id="222-estrutura-hierárquica">2.2.2. Estrutura hierárquica</h4>

<blockquote>
  <ul>
  <li><a href="#41"> AbstractRepositoryCore</a> <br>
  <ul><li><a href="#42">AbstractRepositoryEntityManager</a> <br>
  <ul><li><a href="#43">AbstractRepositoryQuery</a> <br>
  <ul><li><a href="#44"> AbstractRepositoryCommand</a> <br>
  <ul><li><a href="#45"> AbstractRepository</a> <br>
  <ul><li><a href="#46"> Repository</a></li></ul></li></ul></li></ul></li></ul></li></ul></li>
  </ul>
  
  <blockquote>
    <p>A classe abaixo herda a classe acima.  <br>
    Sendo assim, a classe <em>AbstractRepositoryCore</em> é a classe de primeiro nível, e a classe <em>AbstractRepositoryEntityManager</em> herda/estende a <em>AbstractRepositoryCore</em></p>
  </blockquote>
</blockquote>



<h5 id="2221-o-uso-das-classes-inepzendrepository">2.2.2.1. O uso das classes \InepZend\Repository</h5>

<p><a id="41"></a></p>



<h6 id="22211-abstractrepositorycore"><strong>2.2.2.1.1. AbstractRepositoryCore</strong></h6>

<blockquote>
  <ul>
  <li>Classe abstrata responsável por métodos considerados essenciais a manipulação de dados dos repositórios via Doctrine. <br>
  <ul><li>A classe AbstractRepositoryCore estende a classe <a href="http://www.doctrine-project.org/api/orm/2.2/class-Doctrine.ORM.EntityRepository.html" target="_blanck">EntityRepository</a> do Doctrine</li></ul></li>
  <li>A classe AbstractRepositoryCore tem em seu escopo o mapeamento a trait  <a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Log.html" target="_blanck">LogCall</a> <br>
  <ul><li>A trait LogCall é responsável em realizar a auditoria dos métodos que contenham a visibilidade protegida (<strong>protect</strong>).</li></ul></li>
  <li>Os métodos podem ser vistos na documentação do InepZend: [ <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryCore.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryCore.html</a> ]</li>
  </ul>
</blockquote>

<p><a id="42"></a></p>



<h6 id="22212-abstractrepositoryentitymanager"><strong>2.2.2.1.2. AbstractRepositoryEntityManager</strong></h6>

<blockquote>
  <ul>
  <li>Classe abstrata responsável por métodos relacionados a instancias e configurações do <a href="https://github.com/doctrine/doctrine2/blob/master/lib/Doctrine/ORM/EntityManager.php" target="_blank">EntityManager</a>.</li>
  <li>Os métodos podem ser vistos na documentação do InepZend: [ <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryEntityManager.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryEntityManager.html</a> ]</li>
  </ul>
</blockquote>

<p><a id="43"></a></p>



<h6 id="22213-abstractrepositoryquery"><strong>2.2.2.1.3. AbstractRepositoryQuery</strong></h6>

<blockquote>
  <ul>
  <li>Classe abstrata responsável por métodos relacionados a instancias/execução de <strong>Query</strong>.</li>
  <li>Os tipos de execuções e retornos são referentes aos objetos dos tipos: <br>
  <ul><li>Doctrine\ORM\QueryBuilder;</li>
  <li>Doctrine\ORM\Query;</li>
  <li>Doctrine\DBAL\Statement;</li>
  <li>Doctrine\ORM\NativeQuery;</li></ul></li>
  <li>Os métodos podem ser vistos na documentação do InepZend: [ <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryQuery.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryQuery.html</a> ]</li>
  </ul>
</blockquote>

<p><a id="44"></a></p>



<h6 id="22214-abstractrepositorycommand"><strong>2.2.2.1.4. AbstractRepositoryCommand</strong></h6>

<blockquote>
  <ul>
  <li>Classe abstrata responsável por métodos de execução de alguns <strong>comandos SQL</strong>, principalmente o controle de transação como: <br>
  <ul><li>Begin TransAction;</li>
  <li>Commit;</li>
  <li>Rollback;</li></ul></li>
  <li>Além dos métodos de controle de transação a classe disponibiliza métodos que requerem condicional para deletar ou alterar uma coleção de entidades, sendo elas: <br>
  <ul><li>deleteBy;</li>
  <li>updateBy;</li></ul></li>
  <li>Os métodos podem ser vistos na documentação do InepZend: [ <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryCommand.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepositoryCommand.html</a> ]</li>
  </ul>
  
  <p><a id="45"></a></p>
</blockquote>



<h6 id="22215-abstractrepository"><strong>2.2.2.1.5. AbstractRepository</strong></h6>

<blockquote>
  <ul>
  <li>Classe abstrata responsável por métodos finais ou de grande uso pelos serviços. <br>
  <ul><li>Uma das utilidades principais dessa classe é a possibilidade de comunicação com o componente  <a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html" target="_blank">\InepZend\Paginator\Pagiantor</a> através do método findByPaged. <br>
  <ul><li>Método <strong>findByPaged</strong> é responsável em retornar os dados da entidade parametrizada, o mesmo é utilizado em paginação podendo ser também utilizado para pesquisas mais refinadas.</li>
  <li>Esse método é consumido pelos componentes <strong>\InepZend\Service</strong> através do método <a href="desenvphp.inep.gov.br/apidoc/source-class-InepZend.Service.AbstractServiceRepository.html" target="_blank">AbstractServiceRepository</a> e <strong>\InepZend\Controller</strong> através do método <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Controller.AbstractControllerPaginator.html" target="_blank">AbstractControllerPaginator</a> de forma indiretamente.</li></ul></li></ul></li>
  <li>Os métodos podem ser vistos na documentação do InepZend: [ <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepository.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.AbstractRepository.html</a> ]   </li>
  </ul>
  
  <p><a id="46"></a></p>
</blockquote>



<h6 id="22216-repository"><strong>2.2.2.1.6. Repository</strong></h6>

<blockquote>
  <ul>
  <li>Classe responsável pelos principais métodos utilizados na camada Repository que interage diretamente com o SGDB via Doctrine.</li>
  <li>Os métodos podem ser vistos na documentação do InepZend: [ <a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.Repository.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.Repository.html</a> ] <br>
  <hr></li>
  </ul>
</blockquote>



<h4 id="223-namespace"><i class="icon-sitemap"></i> 2.2.3. Namespace</h4>

<blockquote>
  <ul>
  <li>\InepZend\Repository</li>
  </ul>
</blockquote>

<hr>



<h3 id="23-apidocunittest"><i class="icon-book"></i> 2.3. APIDoc/UnitTest</h3>

<blockquote>
  <p></p><ul> <br>
  <li>APIDoc <br></li></ul><p></p>
  
  <blockquote>
    <p><a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Repository.html"></a><a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Repository.html">http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Repository.html</a>
    </p>
  </blockquote>
</blockquote>

<hr>



<h2 id="3-como-usar"><i class="icon-terminal"></i> 3. Como usar</h2>



<h3 id="31-onde-utilizar-o-componente">3.1. Onde utilizar o componente</h3>

<p><a id="camadas"></a></p>



<h4 id="311-camadas">3.1.1 Camadas</h4>

<blockquote>
  <ul>
  <li>Todas as classes referentes a Repository deve estender a classe InepZend\Repository\Repository.</li>
  </ul>
</blockquote>

<p><a id="utilizando"></a></p>



<h3 id="32-utilizando-o-componente">3.2. Utilizando o componente</h3>

<blockquote>
  <ul>
  <li>As classes do componente são utilizadas a partir de necessidades de iterações com informações que estejam armazenados em um Banco de Dados.</li>
  <li>O fluxo inicia-se na camada controladora até a chegada na de repositório, por exemplo:</li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-comment"># Requisicao na Controller</span>
<span class="hljs-variable">$this</span>-&gt;getService()-&gt;saveUser(<span class="hljs-keyword">array</span>(<span class="hljs-string">'id'</span> =&gt; <span class="hljs-number">1</span>));

<span class="hljs-comment"># Requisicao na Service</span>
<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(<span class="hljs-variable">$arrParam</span>)</span>
{</span>
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;getRepositoryEntity-&gt;saveUser(<span class="hljs-variable">$arrParam</span>);
}

<span class="hljs-comment"># Requisicao na Repositry</span>
<span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveUser</span><span class="hljs-params">(<span class="hljs-variable">$arrParam</span>)</span>
{</span>
    <span class="hljs-variable">$mixResult</span> = <span class="hljs-keyword">null</span>;
    ...
    <span class="hljs-comment">// Implementacao</span>
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$mixResult</span>;
}</code></pre>



<h4 id="321-executando-os-métodos-da-repository">3.2.1 Executando os métodos da Repository</h4>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-comment"># Metodo executado nos exemplos.</span>
<span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryDQL</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-variable">$queryBuilder</span> = <span class="hljs-variable">$this</span>-&gt;createQueryBuilder();
    <span class="hljs-variable">$query</span> = <span class="hljs-variable">$queryBuilder</span>-&gt;select(<span class="hljs-string">'Path\To\Entity'</span> . <span class="hljs-string">'.no_subcategoria'</span>)
                -&gt;from(<span class="hljs-string">'Path\To\Entity'</span>, <span class="hljs-string">'alias'</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$query</span>;
}</code></pre>



<h5 id="3211-retornando-doctrineormquerybuilder">3.2.1.1 Retornando Doctrine\ORM\QueryBuilder;</h5>

<blockquote>
  <ul>
  <li>QueryBuilder fornece um conjunto de classes e métodos que é capaz de construir programaticamente consultas, e também fornece uma API fluente. Isso significa que você pode mudar entre uma metodologia para o outro conforme a necessidade. <br>
  <ul><li>A API fornecida é projetada para que condicionalmente  seja implementado uma consulta DQL em várias etapas.</li>
  <li>São fornecidos 3 tipos principais de retornos: <br>
  <ul><li>QueryBuilder::SELECT;</li>
  <li>QueryBuilder::DELETE;</li>
  <li>QueryBuilder::UPDATE;</li></ul></li></ul></li>
  <li>Um objeto do tipo Doctrine\ORM\QueryBuilder sempre é criado a partir do método createQueryBuilder().</li>
  <li>O objeto QueryBuilder é obtido a partir da EntityManager na qual a Repository estende.</li>
  </ul>
</blockquote>

<pre class="prettyprint"><code class=" hljs coffeescript">public <span class="hljs-reserved">function</span> methodReturnQueryBuilder()
{
    <span class="hljs-keyword">return</span> $<span class="hljs-keyword">this</span>-&gt;createQueryBuilder<span class="hljs-function"><span class="hljs-params">()</span>
        -&gt;</span>select<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'Path\To\Entity'</span> . <span class="hljs-string">'.no_subcategoria'</span>)</span>
        -&gt;</span>from(<span class="hljs-string">'Path\To\Entity'</span>, <span class="hljs-string">'alias'</span>);
}</code></pre>

<blockquote>
  <ul>
  <li><p>A partir do createQueryBuilder() pode-se obter um objeto preparado para ser chamado pelo Doctrine\ORM\Query, onde o mesmo é responsável em executar um objeto QueryBuilder.</p>
  
  <blockquote>
    <p>O QueryBuilder é apenas um <strong>objeto construtor</strong>, ele não tem meios de realmente <strong>executar uma consulta</strong>. Por este fato é sempre necessário converter uma instância QueryBuilder em um objeto de consulta.</p>
  </blockquote></li>
  <li><p>Internamente o QueryBuilder trabalha com um <strong>cache DQL</strong> para aumentar o desempenho. Um QueryBuilder pode estar em dois estados diferentes:</p>
  
  <ul><li>QueryBuilder::STATE_CLEAN  <br>
  <ul><li>O que significa DQL não foram alterados desde a última recuperação ou nada foram adicionados desde a sua instanciação;</li></ul></li>
  <li>QueryBuilder::STATE_DIRTY  <br>
  <ul><li>O que significa que a consulta DQL deve (e vai) ser processado na próxima recuperação;</li></ul></li></ul></li>
  </ul>
</blockquote>

<h5 id="3212-retornando-doctrineormquery">3.2.1.2 Retornando Doctrine\ORM\Query</h5>

<blockquote>
  <p></p><ul> <br>
  <li>O objeto Doctrine\ORM\Query pode ser obtido a partir de um objeto QueryBuilder, na qual a execução do DQL ocorre através dos métodos exemplificados abaixo: <br>
  <ul><li><span>$</span>result = $query-&gt;<strong>getResult</strong>();</li>
  <li><span>$</span>single = $query-&gt;<strong>getSingleResult</strong>();</li>
  <li><span>$</span>array = $query-&gt;<strong>getArrayResult</strong>();</li>
  <li><span>$</span>scalar = $query-&gt;<strong>getScalarResult</strong>();</li>
  <li><span>$</span>singleScalar = $query-&gt;<strong>getSingleScalarResult</strong>();</li></ul></li>
  <li>Na Repository há métodos responsáveis em executar/manipular objetos do tipo QueryBuilder na qual retornam um objeto do tipo <strong>Query</strong>, como por exemplo o método <strong>executeDQL()</strong> que é responsável em executar um DQL e o método <strong>queryFactory()</strong> responsável em preparar os parâmetros em objetos <strong>Query</strong> para serem executadas. <br></li></ul><p></p>
  
  <blockquote>
    <p>O método <strong>queryFactory()</strong> não somente manipula DQL, mas também manipula outros tipos de Objetos.
    </p>
  </blockquote>
</blockquote>

<pre class="prettyprint"><code class=" hljs php"><span class="hljs-comment"># Executando um DQL(QueryBuilder)</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodReturnQuery</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-variable">$this</span>-&gt;executeDQL(<span class="hljs-variable">$this</span>-&gt;methodReturnQueryBuilder());
}

<span class="hljs-comment"># Manipulando um DQL(QueryBuilder)</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodPrepareQuery</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-variable">$this</span>-&gt;queryFactory(<span class="hljs-keyword">null</span>, <span class="hljs-variable">$this</span>-&gt;methodReturnQueryBuilder());
}</code></pre>



<h5 id="3213-retornando-doctrineormnativequery">3.2.1.3 Retornando Doctrine\ORM\NativeQuery</h5>

<blockquote>
  <ul>
  <li>NativeQuery são as instruções <strong>SQL SELECT</strong> nativas e a realização do mapeamento dos resultados em entidades Doctrine. <br>
  <ul><li>É necessário descrever as colunas no mapeamento de resultados para que a propriedade da entidade possa ser alimentada. Esta descrição é representada por um objeto <strong>ResultSetMapping</strong>.</li></ul></li>
  <li>Para instanciar um objeto NativeQuery é necessário utilizar o método <strong>createNativeQuery </strong> que recebe uma instrução SQL (<span>$</span>strSQL) e um objeto ResultSetMapping (<span>$</span>resultSetMapping).</li>
  <li>Uma vez obtido uma instância de um NativeQuery, pode-se vincular parâmetros para ele com a mesma API disponibilizada pelo Doctrine\ORM\Query para que possa ser <strong>executado</strong> e assim obter o resultado.</li>
  <li>O componente Repository disponibiliza o método responsável em realizar a execução de objetos NativeQuery’s, sendo esse o <strong>executeSQLMapping()</strong>. <br>
  <ul><li>Observando que é necessário passar como parâmetro o SQL e o array a ser mapeado, podendo esse último passado utilizando o método <strong>constructMapping()</strong> também disponibilizado pelo componente.</li></ul></li>
  </ul>
</blockquote>

<pre class="prettyprint"><code class=" hljs php"><span class="hljs-comment"># Query nativa SQL</span>
<span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSqlNative</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$strSQL</span> = <span class="hljs-string">'SELECT 
                          subcategoria.co_subcategoria,
                          subcategoria.no_subcategoria,
                          categoria.co_categoria
                    FROM publicacoes.tb_subcategoria subcategoria
                    INNER JOIN publicacoes.tb_categoria categoria ON
                            categoria.co_categoria = subcategoria.co_categoria'</span>;
}

<span class="hljs-comment"># Array a ser mapeado</span>
<span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMapping</span><span class="hljs-params">()</span>
{</span>
        <span class="hljs-variable">$arrMapping</span> = <span class="hljs-keyword">array</span>(
            <span class="hljs-string">'categoria'</span> =&gt; <span class="hljs-keyword">array</span>(
                <span class="hljs-string">'from'</span> =&gt; <span class="hljs-keyword">array</span>(
                    <span class="hljs-string">'entity'</span> =&gt; <span class="hljs-string">'Publicacao\Entity\Categoria'</span>,
                ),
                <span class="hljs-string">'field'</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">'co_categoria'</span>, <span class="hljs-string">'no_categoria'</span>),
            ),
            <span class="hljs-string">'subcategoria'</span> =&gt; <span class="hljs-keyword">array</span>(
                <span class="hljs-string">'join'</span> =&gt; <span class="hljs-keyword">array</span>(
                    <span class="hljs-string">'entity'</span> =&gt; <span class="hljs-keyword">self</span>::ENTITY,
                    <span class="hljs-string">'parent_alias'</span> =&gt; <span class="hljs-string">'categoria'</span>,
                    <span class="hljs-string">'parent_attribute'</span> =&gt; <span class="hljs-string">'subcategoria'</span>,
                ),
                <span class="hljs-string">'field'</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">'co_subcategoria'</span>, <span class="hljs-string">'no_subcategoria'</span>),
            )
        );
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$arrMapping</span>;
}

<span class="hljs-comment"># Juncao dos metodos "executeSQLMapping()" e "constructMapping()"     </span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodReturnNativeQuery</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-comment"># Executando o "constructMapping()"</span>
    <span class="hljs-variable">$arrMapping</span> = <span class="hljs-variable">$this</span>-&gt;constructMapping(<span class="hljs-variable">$this</span>-&gt;getMapping());

    <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;executeSQLMapping(<span class="hljs-variable">$this</span>-&gt;getSqlNative(), <span class="hljs-keyword">array</span>(), <span class="hljs-variable">$arrMapping</span>);
}</code></pre>



<h5 id="3214-retornando-doctrinedbalstatement">3.2.1.4 Retornando Doctrine\DBAL\Statement</h5>

<blockquote>
  <ul>
  <li>Doctrine DBAL assemelha-se a API PDO.</li>
  <li>Doctrine DBAL é instanciado a partir do PDO (PHP Data Objects) e realiza a integração de extensões nativas do mesmo. No momento que há um conexão aberta através da Doctrine\DBAL\DriverManager::getConnection() os métodos que se desejam da API podem ser utilizados para a recuperação de dados facilmente.</li>
  </ul>
</blockquote>

<pre class="prettyprint"><code class=" hljs bash"><span class="hljs-comment"># Simples demonstracao para se recuperar um Statement</span>
<span class="hljs-variable">$connection</span> = DriverManager::getConnection(<span class="hljs-variable">$arrParam</span>, <span class="hljs-variable">$arrConfig</span>);
<span class="hljs-variable">$strSQL</span> = <span class="hljs-string">"SELECT * FROM articles"</span>;
<span class="hljs-variable">$statement</span> = <span class="hljs-variable">$connection</span>-&gt;query(<span class="hljs-variable">$strSQL</span>);</code></pre>

<blockquote>
  <ul>
  <li>Assim como os demais tipos de retornos, o Repository disponibiliza o método responsável pela recuperação do objeto do tipo Statement, o <strong>executeSQL()</strong>.</li>
  </ul>
</blockquote>

<pre class="prettyprint"><code class=" hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSql</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$strSQL</span> = <span class="hljs-string">'SELECT 
                          subcategoria.co_subcategoria,
                          subcategoria.no_subcategoria,
                          categoria.co_categoria
                    FROM publicacoes.tb_subcategoria subcategoria
                    INNER JOIN publicacoes.tb_categoria categoria ON
                            categoria.co_categoria = subcategoria.co_categoria'</span>;
}

<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">returnStatement</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;executeSQL(<span class="hljs-variable">$this</span>-&gt;getSql());
}</code></pre>

<h2 id="4-referência"><a id="referencia"></a> <i class="icon-unlink"></i> 4. Referência </h2>

<blockquote>
  <p><a href="http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.Repository.html">http://desenvphp.inep.gov.br/apidoc/class-InepZend.Repository.Repository.html</a></p>
</blockquote></div></body>
</html>