<?php

namespace InepZend\Util;

use InepZend\UnitTest\AbstractUnitTest;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-08-13 at 12:11:07.
 */
class FormatTest extends AbstractUnitTest
{

    /**
     * Generated from @assert ('173.575.278-91') === true.
     *
     * @covers \InepZend\Util\Format::isCpf
     */
    public function testIsCpf()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Format::isCpf('173.575.278-91')
        );
    }

    /**
     * Generated from @assert ('17357527891') !== true.
     *
     * @covers \InepZend\Util\Format::isCpf
     */
    public function testIsCpf2()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCpf('17357527891')
        );
    }

    /**
     * Generated from @assert ('173575278-91') !== true.
     *
     * @covers \InepZend\Util\Format::isCpf
     */
    public function testIsCpf3()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCpf('173575278-91')
        );
    }

    /**
     * Generated from @assert ('173.57527891') !== true.
     *
     * @covers \InepZend\Util\Format::isCpf
     */
    public function testIsCpf4()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCpf('173.57527891')
        );
    }

    /**
     * Generated from @assert ('abc.def.ghi-91') !== true.
     *
     * @covers \InepZend\Util\Format::isCpf
     */
    public function testIsCpf5()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCpf('abc.def.ghi-91')
        );
    }

    /**
     * Generated from @assert ('56.167.101/0001-06') === true.
     *
     * @covers \InepZend\Util\Format::isCnpj
     */
    public function testIsCnpj()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Format::isCnpj('56.167.101/0001-06')
        );
    }

    /**
     * Generated from @assert ('56167101000106') !== true.
     *
     * @covers \InepZend\Util\Format::isCnpj
     */
    public function testIsCnpj2()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCnpj('56167101000106')
        );
    }

    /**
     * Generated from @assert ('56.167101000106') !== true.
     *
     * @covers \InepZend\Util\Format::isCnpj
     */
    public function testIsCnpj3()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCnpj('56.167101000106')
        );
    }

    /**
     * Generated from @assert ('56167101/000106') !== true.
     *
     * @covers \InepZend\Util\Format::isCnpj
     */
    public function testIsCnpj4()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCnpj('56167101/000106')
        );
    }

    /**
     * Generated from @assert ('561671010001-06') !== true.
     *
     * @covers \InepZend\Util\Format::isCnpj
     */
    public function testIsCnpj5()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCnpj('561671010001-06')
        );
    }

    /**
     * Generated from @assert ('ab.cde.fgh/ijkl-06') !== true.
     *
     * @covers \InepZend\Util\Format::isCnpj
     */
    public function testIsCnpj6()
    {
        $this->assertNotSame(
                true
                , \InepZend\Util\Format::isCnpj('ab.cde.fgh/ijkl-06')
        );
    }

    /**
     * Generated from @assert ('17357527891') === '173.575.278-91'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj()
    {
        $this->assertSame(
                '173.575.278-91'
                , \InepZend\Util\Format::formatCpfCnpj('17357527891')
        );
    }

    /**
     * Generated from @assert ('56167101000106') === '56.167.101/0001-06'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj2()
    {
        $this->assertSame(
                '56.167.101/0001-06'
                , \InepZend\Util\Format::formatCpfCnpj('56167101000106')
        );
    }

    /**
     * Generated from @assert ('1735752789') === '1735752789'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj3()
    {
        $this->assertSame(
                '1735752789'
                , \InepZend\Util\Format::formatCpfCnpj('1735752789')
        );
    }

    /**
     * Generated from @assert ('5616710100010') === '5616710100010'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj4()
    {
        $this->assertSame(
                '5616710100010'
                , \InepZend\Util\Format::formatCpfCnpj('5616710100010')
        );
    }

    /**
     * Generated from @assert ('123456abcd') === '123456abcd'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj5()
    {
        $this->assertSame(
                '123456abcd'
                , \InepZend\Util\Format::formatCpfCnpj('123456abcd')
        );
    }

    /**
     * Generated from @assert ('56167101000106120') === '56167101000106120'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj6()
    {
        $this->assertSame(
                '56167101000106120'
                , \InepZend\Util\Format::formatCpfCnpj('56167101000106120')
        );
    }

    /**
     * Generated from @assert ('173575278912') === '173575278912'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj7()
    {
        $this->assertSame(
                '173575278912'
                , \InepZend\Util\Format::formatCpfCnpj('173575278912')
        );
    }

    /**
     * Generated from @assert ('abcdefghijkl06') === 'abcdefghijkl06'.
     *
     * @covers \InepZend\Util\Format::formatCpfCnpj
     */
    public function testFormatCpfCnpj8()
    {
        $this->assertSame(
                'abcdefghijkl06'
                , \InepZend\Util\Format::formatCpfCnpj('abcdefghijkl06')
        );
    }

    /**
     * Generated from @assert ('173.575.278-91') === '17357527891'.
     *
     * @covers \InepZend\Util\Format::clearCpfCnpj
     */
    public function testClearCpfCnpj()
    {
        $this->assertSame(
                '17357527891'
                , \InepZend\Util\Format::clearCpfCnpj('173.575.278-91')
        );
    }

    /**
     * Generated from @assert ('56.167.101/0001-06') === '56167101000106'.
     *
     * @covers \InepZend\Util\Format::clearCpfCnpj
     */
    public function testClearCpfCnpj2()
    {
        $this->assertSame(
                '56167101000106'
                , \InepZend\Util\Format::clearCpfCnpj('56.167.101/0001-06')
        );
    }

    /**
     * Generated from @assert ('12532227364') === '125.32227.36-4'.
     *
     * @covers \InepZend\Util\Format::formatPisPasep
     */
    public function testFormatPisPasep()
    {
        $this->assertSame(
                '125.32227.36-4'
                , \InepZend\Util\Format::formatPisPasep('12532227364')
        );
    }

    /**
     * Generated from @assert ('125322273645') === '125322273645'.
     *
     * @covers \InepZend\Util\Format::formatPisPasep
     */
    public function testFormatPisPasep2()
    {
        $this->assertSame(
                '125322273645'
                , \InepZend\Util\Format::formatPisPasep('125322273645')
        );
    }

    /**
     * Generated from @assert ('125322273') === '125322273'.
     *
     * @covers \InepZend\Util\Format::formatPisPasep
     */
    public function testFormatPisPasep3()
    {
        $this->assertSame(
                '125322273'
                , \InepZend\Util\Format::formatPisPasep('125322273')
        );
    }

    /**
     * Generated from @assert ('70610404') === '70610-404'.
     *
     * @covers \InepZend\Util\Format::formatCep
     */
    public function testFormatCep()
    {
        $this->assertSame(
                '70610-404'
                , \InepZend\Util\Format::formatCep('70610404')
        );
    }

    /**
     * Generated from @assert ('7061040') === '07061-040'.
     *
     * @covers \InepZend\Util\Format::formatCep
     */
    public function testFormatCep2()
    {
        $this->assertSame(
                '07061-040'
                , \InepZend\Util\Format::formatCep('7061040')
        );
    }

    /**
     * Generated from @assert ('7061040412') === '7061040412'.
     *
     * @covers \InepZend\Util\Format::formatCep
     */
    public function testFormatCep3()
    {
        $this->assertSame(
                '7061040412'
                , \InepZend\Util\Format::formatCep('7061040412')
        );
    }

    /**
     * Generated from @assert ('abcdefgh') === 'abcdefgh'.
     *
     * @covers \InepZend\Util\Format::formatCep
     */
    public function testFormatCep4()
    {
        $this->assertSame(
                'abcdefgh'
                , \InepZend\Util\Format::formatCep('abcdefgh')
        );
    }

    /**
     * Generated from @assert ('-1') === '-1,00%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent()
    {
        $this->assertSame(
                '-1,00%'
                , \InepZend\Util\Format::formatPercent('-1')
        );
    }

    /**
     * Generated from @assert ('28') === '28,00%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent2()
    {
        $this->assertSame(
                '28,00%'
                , \InepZend\Util\Format::formatPercent('28')
        );
    }

    /**
     * Generated from @assert ('28', 3) === '28,000%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent3()
    {
        $this->assertSame(
                '28,000%'
                , \InepZend\Util\Format::formatPercent('28', 3)
        );
    }

    /**
     * Generated from @assert ('28', 10) === '28,0000000000%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent4()
    {
        $this->assertSame(
                '28,0000000000%'
                , \InepZend\Util\Format::formatPercent('28', 10)
        );
    }

    /**
     * Generated from @assert ('2.58') === '2,58%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent5()
    {
        $this->assertSame(
                '2,58%'
                , \InepZend\Util\Format::formatPercent('2.58')
        );
    }

    /**
     * Generated from @assert ('2.58', 3) === '2,580%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent6()
    {
        $this->assertSame(
                '2,580%'
                , \InepZend\Util\Format::formatPercent('2.58', 3)
        );
    }

    /**
     * Generated from @assert ('99.9589') === '99,96%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent7()
    {
        $this->assertSame(
                '99,96%'
                , \InepZend\Util\Format::formatPercent('99.9589')
        );
    }

    /**
     * Generated from @assert ('99.9589', 3) === '99,959%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent8()
    {
        $this->assertSame(
                '99,959%'
                , \InepZend\Util\Format::formatPercent('99.9589', 3)
        );
    }

    /**
     * Generated from @assert ('teste') === '0,00%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent9()
    {
        $this->assertSame(
                '0,00%'
                , \InepZend\Util\Format::formatPercent('teste')
        );
    }

    /**
     * Generated from @assert ('teste', 3) === '0,000%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent10()
    {
        $this->assertSame(
                '0,000%'
                , \InepZend\Util\Format::formatPercent('teste', 3)
        );
    }

    /**
     * Generated from @assert ('teste', 10) === '0,0000000000%'.
     *
     * @covers \InepZend\Util\Format::formatPercent
     */
    public function testFormatPercent11()
    {
        $this->assertSame(
                '0,0000000000%'
                , \InepZend\Util\Format::formatPercent('teste', 10)
        );
    }

    /**
     * Generated from @assert ('15:22:50') === '15:22:50'.
     *
     * @covers \InepZend\Util\Format::formatTime
     */
    public function testFormatTime()
    {
        $this->assertSame(
                '15:22:50'
                , \InepZend\Util\Format::formatTime('15:22:50')
        );
    }

    /**
     * Generated from @assert ('23451234560') === str_replace('&#32;', ' ', '(23)&#32;45123-4560').
     *
     * @covers \InepZend\Util\Format::formatPhone
     */
    public function testFormatPhone()
    {
        $this->assertSame(
                str_replace('&#32;', ' ', '(23)&#32;45123-4560')
                , \InepZend\Util\Format::formatPhone('23451234560')
        );
    }

    /**
     * Generated from @assert ('1234512345') === str_replace('&#32;', ' ', '(12)&#32;3451-2345').
     *
     * @covers \InepZend\Util\Format::formatPhone
     */
    public function testFormatPhone2()
    {
        $this->assertSame(
                str_replace('&#32;', ' ', '(12)&#32;3451-2345')
                , \InepZend\Util\Format::formatPhone('1234512345')
        );
    }

    /**
     * Generated from @assert ('12345123') === '1234-5123'.
     *
     * @covers \InepZend\Util\Format::formatPhone
     */
    public function testFormatPhone3()
    {
        $this->assertSame(
                '1234-5123'
                , \InepZend\Util\Format::formatPhone('12345123')
        );
    }

    /**
     * Generated from @assert ('1234512') === '1234512'.
     *
     * @covers \InepZend\Util\Format::formatPhone
     */
    public function testFormatPhone4()
    {
        $this->assertSame(
                '1234512'
                , \InepZend\Util\Format::formatPhone('1234512')
        );
    }

    /**
     * Generated from @assert ('(11) 1111-1111') === str_replace('&#32;', ' ', '(11)&#32;1111-1111').
     *
     * @covers \InepZend\Util\Format::formatPhone
     */
    public function testFormatPhone5()
    {
        $this->assertSame(
                str_replace('&#32;', ' ', '(11)&#32;1111-1111')
                , \InepZend\Util\Format::formatPhone('(11) 1111-1111')
        );
    }

    /**
     * Generated from @assert ('R$ 1.234,56') == '1234.56'.
     *
     * @covers \InepZend\Util\Format::moneyToFloat
     */
    public function testMoneyToFloat()
    {
        $this->assertEquals(
                '1234.56'
                , \InepZend\Util\Format::moneyToFloat('R$ 1.234,56')
        );
    }

    /**
     * Generated from @assert ('R$ 22.000.000,00') == '22000000'.
     *
     * @covers \InepZend\Util\Format::moneyToFloat
     */
    public function testMoneyToFloat2()
    {
        $this->assertEquals(
                '22000000'
                , \InepZend\Util\Format::moneyToFloat('R$ 22.000.000,00')
        );
    }

    /**
     * Generated from @assert ('R$ 22.000.000,95') == '22000000.95'.
     *
     * @covers \InepZend\Util\Format::moneyToFloat
     */
    public function testMoneyToFloat3()
    {
        $this->assertEquals(
                '22000000.95'
                , \InepZend\Util\Format::moneyToFloat('R$ 22.000.000,95')
        );
    }

    /**
     * Generated from @assert ('R$ 145.998.000.000,95') == '145998000000.95'.
     *
     * @covers \InepZend\Util\Format::moneyToFloat
     */
    public function testMoneyToFloat4()
    {
        $this->assertEquals(
                '145998000000.95'
                , \InepZend\Util\Format::moneyToFloat('R$ 145.998.000.000,95')
        );
    }

    /**
     * Generated from @assert ('R$ 500,05') == '500.05'.
     *
     * @covers \InepZend\Util\Format::moneyToFloat
     */
    public function testMoneyToFloat5()
    {
        $this->assertEquals(
                '500.05'
                , \InepZend\Util\Format::moneyToFloat('R$ 500,05')
        );
    }

    /**
     * Generated from @assert ('1234.56') == 'R$ 1.234,56'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney()
    {
        $this->assertEquals(
                'R$ 1.234,56'
                , \InepZend\Util\Format::floatToMoney('1234.56')
        );
    }

    /**
     * Generated from @assert ('1234.56', false) == '1.234,56'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney2()
    {
        $this->assertEquals(
                '1.234,56'
                , \InepZend\Util\Format::floatToMoney('1234.56', false)
        );
    }

    /**
     * Generated from @assert ('22000000') == 'R$ 22.000.000,00'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney3()
    {
        $this->assertEquals(
                'R$ 22.000.000,00'
                , \InepZend\Util\Format::floatToMoney('22000000')
        );
    }

    /**
     * Generated from @assert ('22000000', false) == '22.000.000,00'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney4()
    {
        $this->assertEquals(
                '22.000.000,00'
                , \InepZend\Util\Format::floatToMoney('22000000', false)
        );
    }

    /**
     * Generated from @assert ('22000000.95') == 'R$ 22.000.000,95'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney5()
    {
        $this->assertEquals(
                'R$ 22.000.000,95'
                , \InepZend\Util\Format::floatToMoney('22000000.95')
        );
    }

    /**
     * Generated from @assert ('22000000.95', false) == '22.000.000,95'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney6()
    {
        $this->assertEquals(
                '22.000.000,95'
                , \InepZend\Util\Format::floatToMoney('22000000.95', false)
        );
    }

    /**
     * Generated from @assert ('145998000000.95') == 'R$ 145.998.000.000,95'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney7()
    {
        $this->assertEquals(
                'R$ 145.998.000.000,95'
                , \InepZend\Util\Format::floatToMoney('145998000000.95')
        );
    }

    /**
     * Generated from @assert ('145998000000.95', false) == '145.998.000.000,95'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney8()
    {
        $this->assertEquals(
                '145.998.000.000,95'
                , \InepZend\Util\Format::floatToMoney('145998000000.95', false)
        );
    }

    /**
     * Generated from @assert ('500.05') == 'R$ 500,05'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney9()
    {
        $this->assertEquals(
                'R$ 500,05'
                , \InepZend\Util\Format::floatToMoney('500.05')
        );
    }

    /**
     * Generated from @assert ('500.05', false) == '500,05'.
     *
     * @covers \InepZend\Util\Format::floatToMoney
     */
    public function testFloatToMoney10()
    {
        $this->assertEquals(
                '500,05'
                , \InepZend\Util\Format::floatToMoney('500.05', false)
        );
    }

    /**
     * Generated from @assert ('12345678911', '999.999.999-99') == '123.456.789-11'.
     *
     * @covers \InepZend\Util\Format::setMask
     */
    public function testSetMask()
    {
        $this->assertEquals(
                '123.456.789-11'
                , \InepZend\Util\Format::setMask('12345678911', '999.999.999-99')
        );
    }

    /**
     * Generated from @assert ('1234567891', '(99)9999-9999') == '(12)3456-7891'.
     *
     * @covers \InepZend\Util\Format::setMask
     */
    public function testSetMask2()
    {
        $this->assertEquals(
                '(12)3456-7891'
                , \InepZend\Util\Format::setMask('1234567891', '(99)9999-9999')
        );
    }

    /**
     * Generated from @assert ('12345678', '99.999.99-9') == '12.345.67-8'.
     *
     * @covers \InepZend\Util\Format::setMask
     */
    public function testSetMask3()
    {
        $this->assertEquals(
                '12.345.67-8'
                , \InepZend\Util\Format::setMask('12345678', '99.999.99-9')
        );
    }

    /**
     * Generated from @assert ('12345678912345', '99.999.99-9-9.99-999') == '12.345.67-8-9.12-345'.
     *
     * @covers \InepZend\Util\Format::setMask
     */
    public function testSetMask4()
    {
        $this->assertEquals(
                '12.345.67-8-9.12-345'
                , \InepZend\Util\Format::setMask('12345678912345', '99.999.99-9-9.99-999')
        );
    }

    /**
     * Generated from @assert ('1234567891234', '99.999.99-9-9.99-999') == '12.345.67-8-9.12-34'.
     *
     * @covers \InepZend\Util\Format::setMask
     */
    public function testSetMask5()
    {
        $this->assertEquals(
                '12.345.67-8-9.12-34'
                , \InepZend\Util\Format::setMask('1234567891234', '99.999.99-9-9.99-999')
        );
    }

    /**
     * Generated from @assert ('12345678912345', '99.999.99-9-9.99-99/9') == '12.345.67-8-9.12-34/5'.
     *
     * @covers \InepZend\Util\Format::setMask
     */
    public function testSetMask6()
    {
        $this->assertEquals(
                '12.345.67-8-9.12-34/5'
                , \InepZend\Util\Format::setMask('12345678912345', '99.999.99-9-9.99-99/9')
        );
    }

    /**
     * Generated from @assert ('999.999.999-99') == '99999999999'.
     *
     * @covers \InepZend\Util\Format::clearMask
     */
    public function testClearMask()
    {
        $this->assertEquals(
                '99999999999'
                , \InepZend\Util\Format::clearMask('999.999.999-99')
        );
    }

    /**
     * Generated from @assert ('12.345.67-8-9.12-34/5') == '12345678912345'.
     *
     * @covers \InepZend\Util\Format::clearMask
     */
    public function testClearMask2()
    {
        $this->assertEquals(
                '12345678912345'
                , \InepZend\Util\Format::clearMask('12.345.67-8-9.12-34/5')
        );
    }

    /**
     * Generated from @assert ('12-345.67-8-9_1234/5') == '12345678912345'.
     *
     * @covers \InepZend\Util\Format::clearMask
     */
    public function testClearMask3()
    {
        $this->assertEquals(
                '12345678912345'
                , \InepZend\Util\Format::clearMask('12-345.67-8-9_1234/5')
        );
    }

    /**
     * Generated from @assert (1) == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator(1)
        );
    }

    /**
     * Generated from @assert ('true') == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator2()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator('true')
        );
    }

    /**
     * Generated from @assert ('sim') == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator3()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator('sim')
        );
    }

    /**
     * Generated from @assert ('verdadeiro') == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator4()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator('verdadeiro')
        );
    }

    /**
     * Generated from @assert ('verdadeira') == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator5()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator('verdadeira')
        );
    }

    /**
     * Generated from @assert ('s') == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator6()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator('s')
        );
    }

    /**
     * Generated from @assert ('x') == 1.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator7()
    {
        $this->assertEquals(
                1
                , \InepZend\Util\Format::convertToIndicator('x')
        );
    }

    /**
     * Generated from @assert ('nao') == 0.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator8()
    {
        $this->assertEquals(
                0
                , \InepZend\Util\Format::convertToIndicator('nao')
        );
    }

    /**
     * Generated from @assert (false) == 0.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator9()
    {
        $this->assertEquals(
                0
                , \InepZend\Util\Format::convertToIndicator(false)
        );
    }

    /**
     * Generated from @assert ('teste') == 0.
     *
     * @covers \InepZend\Util\Format::convertToIndicator
     */
    public function testConvertToIndicator10()
    {
        $this->assertEquals(
                0
                , \InepZend\Util\Format::convertToIndicator('teste')
        );
    }

    /**
     * Generated from @assert () == array(11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15, 16 => 16, 17 => 17, 18 => 18, 19 => 19, 21 => 21, 22 => 22, 24 => 24, 27 => 27, 28 => 28, 31 => 31, 32 => 32, 33 => 33, 34 => 34, 35 => 35, 37 => 37, 38 => 38, 41 => 41, 42 => 42, 43 => 43, 44 => 44, 45 => 45, 46 => 46, 47 => 47, 48 => 48, 49 => 49, 51 => 51, 53 => 53, 54 => 54, 55 => 55, 61 => 61, 62 => 62, 63 => 63, 64 => 64, 65 => 65, 66 => 66, 67 => 67, 68 => 68, 69 => 69, 71 => 71, 73 => 73, 74 => 74, 75 => 75, 77 => 77, 79 => 79, 81 => 81, 82 => 82, 83 => 83, 84 => 84, 85 => 85, 86 => 86, 87 => 87, 88 => 88, 89 => 89, 91 => 91, 92 => 92, 93 => 93, 94 => 94, 95 => 95, 96 => 96, 97 => 97, 98 => 98, 99 => 99).
     *
     * @covers \InepZend\Util\Format::listDdd
     */
    public function testListDdd()
    {
        $this->assertEquals(
                array(11 => 11, 12 => 12, 13 => 13, 14 => 14, 15 => 15, 16 => 16, 17 => 17, 18 => 18, 19 => 19, 21 => 21, 22 => 22, 24 => 24, 27 => 27, 28 => 28, 31 => 31, 32 => 32, 33 => 33, 34 => 34, 35 => 35, 37 => 37, 38 => 38, 41 => 41, 42 => 42, 43 => 43, 44 => 44, 45 => 45, 46 => 46, 47 => 47, 48 => 48, 49 => 49, 51 => 51, 53 => 53, 54 => 54, 55 => 55, 61 => 61, 62 => 62, 63 => 63, 64 => 64, 65 => 65, 66 => 66, 67 => 67, 68 => 68, 69 => 69, 71 => 71, 73 => 73, 74 => 74, 75 => 75, 77 => 77, 79 => 79, 81 => 81, 82 => 82, 83 => 83, 84 => 84, 85 => 85, 86 => 86, 87 => 87, 88 => 88, 89 => 89, 91 => 91, 92 => 92, 93 => 93, 94 => 94, 95 => 95, 96 => 96, 97 => 97, 98 => 98, 99 => 99)
                , \InepZend\Util\Format::listDdd()
        );
    }

    /**
     * Generated from @assert (true) == array(11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 91, 92, 93, 94, 95, 96, 97, 98, 99).
     *
     * @covers \InepZend\Util\Format::listDdd
     */
    public function testListDdd2()
    {
        $this->assertEquals(
                array(11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 27, 28, 91, 92, 93, 94, 95, 96, 97, 98, 99)
                , \InepZend\Util\Format::listDdd(true)
        );
    }

    /**
     * Generated from @assert () === false.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Format::hasString()
        );
    }

    /**
     * Generated from @assert (null) === false.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString2()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Format::hasString(null)
        );
    }

    /**
     * Generated from @assert ('') === false.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString3()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Format::hasString('')
        );
    }

    /**
     * Generated from @assert (0) === false.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString4()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Format::hasString(0)
        );
    }

    /**
     * Generated from @assert ('1') === false.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString5()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Format::hasString('1')
        );
    }

    /**
     * Generated from @assert (array()) === false.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString6()
    {
        $this->assertSame(
                false
                , \InepZend\Util\Format::hasString(array())
        );
    }

    /**
     * Generated from @assert ('a') === true.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString7()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Format::hasString('a')
        );
    }

    /**
     * Generated from @assert ('1a') === true.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString8()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Format::hasString('1a')
        );
    }

    /**
     * Generated from @assert ('a1') === true.
     *
     * @covers \InepZend\Util\Format::hasString
     */
    public function testHasString9()
    {
        $this->assertSame(
                true
                , \InepZend\Util\Format::hasString('a1')
        );
    }

}
