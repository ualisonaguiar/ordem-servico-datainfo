<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Paginator</title>
<link rel="stylesheet" href="https://stackedit.io/res-min/themes/default.css" />
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body><div class="container"><h1 id="paginator"><strong><i class="icon-folder-open"></i> Paginator</strong></h1>



<h2 id="1-índice">1. Índice</h2>

<p><div class="toc"><div class="toc">
<ul>
<li><a href="#paginator"> Paginator</a><ul>
<li><a href="#1-índice">1. Índice</a></li>
<li><a href="#2-definição"> 2. Definição</a><ul>
<li><a href="#21-conceito"> 2.1. Conceito</a><ul>
<li><a href="#211-paginação-no-inepzend">2.1.1 Paginação no InepZend</a></li>
<li><a href="#212-adapters-utilizados">2.1.2 Adapters Utilizados </a></li>
</ul>
</li>
<li><a href="#22-principais-características"> 2.2. Principais características</a><ul>
<li><a href="#221-classes-e-arquivos-do-componente">2.2.1. Classes e arquivos do componente</a></li>
<li><a href="#222-estrutura">2.2.2. Estrutura</a><ul>
<li><a href="#2221-classe-inepzendpaginator">2.2.2.1. Classe \InepZend\Paginator</a><ul>
<li><a href="#22211-paginator">2.2.2.1.1. Paginator</a></li>
<li><a href="#22212-nativequerypaginator">2.2.2.1.2. NativeQueryPaginator</a></li>
<li><a href="#22213-statementpaginator">2.2.2.1.3. StatementPaginator</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#223-namespace"> 2.2.3. Namespace</a></li>
</ul>
</li>
<li><a href="#23-apidocunittest"> 2.3. APIDoc/UnitTest</a></li>
</ul>
</li>
<li><a href="#3-como-usar"> 3. Como usar</a><ul>
<li><a href="#31-onde-utilizar-o-componente">3.1. Onde utilizar o componente</a><ul>
<li><a href="#311-camadas">3.1.1 Camadas</a></li>
</ul>
</li>
<li><a href="#32-utilizando-o-componente">3.2. Utilizando o componente</a><ul>
<li><a href="#321-instância-com-a-passagem-de-parâmetros">3.2.1 Instância com a passagem de parâmetros</a><ul>
<li><a href="#3211-passando-doctrineormquery">3.2.1.1 Passando Doctrine\ORM\Query</a></li>
<li><a href="#3212-passando-arrayadapter">3.2.1.2 Passando ArrayAdapter</a></li>
<li><a href="#3213-passando-doctrineormnativequery">3.2.1.3 Passando Doctrine\ORM\NativeQuery</a></li>
<li><a href="#3214-passando-doctrinedbalstatement">3.2.1.4 Passando Doctrine\DBAL\Statement</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#33-repository-utilizando-o-componente">3.3. Repository - Utilizando o componente</a><ul>
<li><a href="#331-findbypaged">3.3.1 findByPaged()</a></li>
</ul>
</li>
<li><a href="#34-service-utilizando-o-componente">3.4. Service - Utilizando o componente</a><ul>
<li><a href="#341-findbypaged">3.4.1 findByPaged()</a></li>
</ul>
</li>
<li><a href="#35-controller-utilizando-o-componente">3.5. Controller - Utilizando o componente</a><ul>
<li><a href="#351-indexpaginatoraction">3.5.1 indexPaginatorAction()</a></li>
<li><a href="#352-ajaxpaginatoraction">3.5.2 ajaxPaginatorAction()</a></li>
</ul>
</li>
<li><a href="#36-getpaginator">3.6. getPaginator()</a></li>
<li><a href="#37-fluxo-passando-pelas-camadas-utilizando-flexigrid">3.7. Fluxo - Passando pelas camadas utilizando FlexiGrid</a><ul>
<li><a href="#372-definindo-a-paginação-no-construct-do-controller">3.7.2 Definindo a paginação no __construct do Controller</a></li>
<li><a href="#372-utilizando-a-chamada-do-ajaxpaginatoraction">3.7.2 Utilizando a chamada do ajaxPaginatorAction()</a><ul>
<li><a href="#3721-quando-há-filtro-no-phtml">3.7.2.1 Quando há filtro no PHTML</a></li>
<li><a href="#3722-quando-não-há-filtro-phtml">3.7.2.2 Quando não há filtro PHTML</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#38-erro-de-iterator">3.8. Erro de Iterator</a><ul>
<li><a href="#erro-1">Erro 1</a></li>
<li><a href="#erro-2">Erro 2</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#4-referência">  4. Referência </a></li>
</ul>
</li>
</ul>
</div>
</div>
</p>



<h2 id="2-definição"><i class="icon-th"></i> 2. Definição</h2>

<hr>



<h3 id="21-conceito"><i class="icon-pencil"></i> 2.1. Conceito</h3>

<blockquote>
  <p>O componente <strong>Paginator</strong> tem como objetivo manipular as informações necessárias para a paginação de registros de diferentes elementos.</p>
</blockquote>

<p><a id="definicao"></a></p>



<h4 id="211-paginação-no-inepzend"><strong>2.1.1 Paginação no InepZend</strong></h4>

<ul>
<li>A paginação utilizada no InepZend segue o conceito do <a href="http://framework.zend.com/manual/current/en/modules/zend.paginator.introduction.html" target="_blank">Paginator</a> do ZendFramework2, na qual: <br>
<ul><li>Paginar dados arbitrários, não apenas os relacionados a bancos de dados, podendo ser um array por exemplo.</li>
<li>Retorna somente os resultados que necessitam ser exibidos na tela, por exemplo, para uma consulta de <strong>100</strong> registros e necessita-se somente de <strong>5</strong> registros, serão buscados na base de dados somente estes <strong>5</strong> registros.</li>
<li>Não força seus usuários a aderir a apenas uma maneira de exibir dados ou processamento, pode-se utilizar diversas formas para exibição dos dados de controles de paginação.</li>
<li>Podem ser criados <a href="#adapters">Adapters</a> para interagir com o componente de paginação.</li></ul></li>
</ul>

<p><a id="adapters"></a></p>



<h4 id="212-adapters-utilizados"><strong>2.1.2 Adapters Utilizados </strong></h4>

<ul>
<li><p>A fim de paginar itens, sendo esses de uma forma genérica de acesso aos dados, os acessos ocorrem através de utilização do <em>design pattern</em> <a href="http://pt.wikipedia.org/wiki/Adapter" target="_blank">Adapters</a>. O Adapter implementando é o <a href="http://framework.zend.com/manual/current/en/modules/zend.paginator.advanced.html" target="_blank">AdapterInterface</a> do ZendFramework2, os Adapters sao:</p>

<ul><li><a href="#42">NativeQueryPaginator</a>;</li>
<li><a href="#43">StatementPaginator</a>;</li>
<li><p><a href="http://framework.zend.com/apidoc/2.3/classes/Zend.Paginator.Adapter.ArrayAdapter.html" target="_blank">ArrayAdapter</a></p>

<blockquote>
  <ul><li>Classe da ZendFramework responsável em converter os dados do tipo Array para ser utilizado pelo Paginator.</li></ul>
</blockquote></li>
<li><p>DoctrineAdapter</p>

<blockquote>
  <ul><li>Classe do Doctrine ORM responsável em receber dados do tipo <a href="http://doctrine-orm.readthedocs.org/en/latest/tutorials/pagination.html" target="_blank">Paginator do Doctrine</a> em seu contrutor e assim disponibiliza as informações para serem utilizadas nas respectivas paginações da aplicação.</li></ul>
</blockquote></li></ul></li>
</ul>



<h3 id="22-principais-características"><a id="principais-caracteristicas"></a><i class="icon-info"></i> 2.2. Principais características</h3>



<h4 id="221-classes-e-arquivos-do-componente">2.2.1. Classes e arquivos do componente</h4>

<blockquote>
  <ul>
  <li>Classes:  <br>
  <ul><li>\InepZend\Paginator\Paginator;</li>
  <li>\InepZend\Paginator\Adapter\NativeQueryPaginator;</li>
  <li>\InepZend\Paginator\Adapter\StatementPaginator;</li></ul></li>
  <li>Arquivos phtml auxiliares:  <br>
  <ul><li>_flexigrid-footer;</li>
  <li>_paginator;</li></ul></li>
  </ul>
</blockquote>

<p><a id="hierarquia"></a></p>



<h4 id="222-estrutura">2.2.2. Estrutura</h4>

<blockquote>
  <ul>
  <li><i class="icon-folder-open"></i> <strong>Paginator</strong> <br>
  <ul><li><i class="icon-file"></i><a href="#41"> Paginator.php</a></li>
  <li><i class="icon-folder-open"></i> Adapter <br>
  <ul><li><i class="icon-file"></i> <a href="#42">NativeQueryPaginator.php</a></li>
  <li><i class="icon-file"></i> <a href="#43">StatementPaginator.php</a></li></ul></li>
  <li><i class="icon-folder-open"></i> View <br>
  <ul><li><i class="icon-file"></i> <a href="#44"> _flexigrid-footer.phtml</a></li>
  <li><i class="icon-file"></i> <a href="#45"> _paginator.phtml</a></li></ul></li></ul></li>
  </ul>
</blockquote>



<h5 id="2221-classe-inepzendpaginator">2.2.2.1. Classe \InepZend\Paginator</h5>

<p><a id="41"></a></p>



<h6 id="22211-paginator"><strong>2.2.2.1.1. Paginator</strong></h6>

<blockquote>
  <ul>
  <li><p>Classe responsável em manipular as informações necessárias para a paginação de registros de diferentes elementos.</p></li>
  <li><p>Principais métodos:</p>
  
  <ul><li><strong>__construct()</strong>: Método construtor responsável em setar as informações principais da paginação. <br>
  <ul><li>Ao instancia a classe <strong>Paginator</strong> é necessário passar pelo menos o primeiro parâmetro para obter os dados, os parâmetros são: <br>
  <ul><li>$queryArray (Objeto <em>[NativeQuery, ou Statement ou Paginator]</em> ou Array): <strong>Obrigatório</strong> para obter a paginação;</li>
  <li>$intPage: Pagina atual;</li>
  <li>$intItemPerPage: Quantidade por página;</li></ul></li></ul></li>
  <li><strong>getRegister()</strong>: Método responsável em retornar os registros, apos a paginação ser realizada.</li>
  <li><strong>getZendPaginator()</strong>: Método responsável em retornar o objeto ZendPaginator, apos a paginação ser realizada.</li>
  <li><strong>getRegisterToGrid()</strong>: Método responsável em retornar os registros formatados para a Grid, apos a paginação ser realizada.      </li>
  <li><strong>convertRegisterToGrid()</strong>: Método responsável em converter os registros para a formatação exigida pela Grid, apos a paginação ser realizada. <br>
  <ul><li>Esse método é o <strong>diferencial</strong> da classe Paginator, pois é onde realiza o retorno da estrutura dos dados a serem utilizados em qualquer tipo de apresentação de Grid, como por exemplo a biblioteca JS FlexiGrid.</li></ul></li></ul></li>
  </ul>
</blockquote>

<p><a id="42"></a></p>



<h6 id="22212-nativequerypaginator"><strong>2.2.2.1.2. NativeQueryPaginator</strong></h6>

<blockquote>
  <ul>
  <li>Essa classe implementa o <a href="#adapters">AdapterInterface</a> com objetivo de manipular dados do tipo <a href="http://doctrine-orm.readthedocs.org/en/latest/reference/native-sql.html" target="_blank">NativeQuery</a> para o Paginator;</li>
  <li>Com NativeQuery você pode executar instruções nativas SQL SELECT e mapear os resultados para entidades Doctrine ou qualquer outro formato suportado pelo resultado Doctrine.</li>
  <li>A fim de fazer esse mapeamento possível, será necessário descrever/mapear ao Doctrine as entidades e colunas envolvidas. Esta descrição é representada por um objeto ResultSetMapping.</li>
  <li>Namespace <br>
  <ul><li>\InepZend\Paginator\Adapter\NativeQueryPaginator;</li></ul></li>
  </ul>
</blockquote>

<ul>
<li>Exemplo: </li>
</ul>



<pre class="prettyprint"><code class=" hljs coffeescript"><span class="hljs-comment"># NativeQueryPaginator</span>
$<span class="hljs-keyword">this</span>-&gt;getService<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'Path\To\Service'</span>)</span>
     -&gt;</span>getEntityManager<span class="hljs-function"><span class="hljs-params">()</span>
     -&gt;</span>createNativeQuery(
         <span class="hljs-string">'SELECT * FROM PUBLICACOES.TB_SUBCATEGORIA WHERE CO_SUBCATEGORIA = 1'</span>, 
         (<span class="hljs-keyword">new</span> ResultSetMapping())
);</code></pre>

<p><a id="43"></a></p>



<h6 id="22213-statementpaginator"><strong>2.2.2.1.3. StatementPaginator</strong></h6>

<blockquote>
  <ul>
  <li>Essa classe implementa o <a href="#adapters">AdapterInterface</a> com objetivo de manipular dados do tipo dados <a href="http://doctrine-dbal.readthedocs.org/en/latest/reference/data-retrieval-and-manipulation.html" target="_blank">Statement</a> para o Paginator, ou seja, trabalha com instruções SQL puras.</li>
  <li>Utiliza conexões abertas para realizar transações com o banco de dados.</li>
  <li>Doctrine DBAL segue o mesmo padrão da API PDO;</li>
  <li>A API fornecida pelo PDO contém varias funções de conveniência em Doctrine DBAL.</li>
  <li>Namespace <br>
  <ul><li>\InepZend\Paginator\Adapter\StatementPaginator;</li></ul></li>
  </ul>
</blockquote>

<ul>
<li>Exemplo:</li>
</ul>



<pre class="prettyprint"><code class=" hljs coffeescript"><span class="hljs-comment"># StateMentPaginator</span>
$<span class="hljs-keyword">this</span>-&gt;getService<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'Path\To\Service'</span>)</span>
      -&gt;</span>getEntityManager<span class="hljs-function"><span class="hljs-params">()</span>
      -&gt;</span>prepare<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'SELECT * FROM PUBLICACOES.TB_SUBCATEGORIA WHERE CO_SUBCATEGORIA = ?'</span>)</span>
      -&gt;</span>bindValue(<span class="hljs-number">1</span>, <span class="hljs-string">'CO_SUBCATEGORIA'</span>);</code></pre>

<hr>



<h4 id="223-namespace"><i class="icon-sitemap"></i> 2.2.3. Namespace</h4>

<blockquote>
  <ul>
  <li>\InepZend\Paginator</li>
  </ul>
</blockquote>

<hr>



<h3 id="23-apidocunittest"><i class="icon-book"></i> 2.3. APIDoc/UnitTest</h3>

<blockquote>
  <p></p><ul> <br>
  <li>APIDoc <br></li></ul><p></p>
  
  <blockquote>
    <p><a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html"></a><a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html">http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html</a>
    </p>
  </blockquote>
</blockquote>

<hr>



<h2 id="3-como-usar"><i class="icon-terminal"></i> 3. Como usar</h2>



<h3 id="31-onde-utilizar-o-componente">3.1. Onde utilizar o componente</h3>

<p><a id="camadas"></a></p>



<h4 id="311-camadas">3.1.1 Camadas</h4>

<blockquote>
  <p></p><ul> <br>
  <li>O componente oferece o serviço de paginação à classes das camadas: <br>
  <ul><li><strong>Repository;</strong></li>
  <li><strong>Service;</strong></li></ul></li>
  <li>Somente estas camadas podem instanciar o objeto <strong>new \InepZend\Paginator\Paginator())</strong>; <br></li></ul><p></p>
  
  <blockquote>
    <ul>
    <li><strong><em>Indiretamente</em></strong> é oferecido o serviço de paginação à classes da camada de Controller.</li>
    </ul>
    
  </blockquote>
</blockquote>

<p><a id="utilizando"></a></p>



<h3 id="32-utilizando-o-componente">3.2. Utilizando o componente</h3>

<blockquote>
  <ul>
  <li>O uso do componente é muito simples, bastando somente a passagem de três parâmetros onde somente o primeiro é obrigatório:  <br>
  <ul><li>O primeiro parâmetro é um objeto query ou registros de array a ser paginado;</li>
  <li>O segundo parâmetro é a página a ter seus registros listados;</li>
  <li>O terceiro parâmetro é o número de registros por página.</li></ul></li>
  <li>Ao instanciar a classe Paginator, as informações/dados acima são passados via __construct, ou seja, na instanciação da mesma são passados os dados conforme a necessidade.</li>
  </ul>
</blockquote>



<h4 id="321-instância-com-a-passagem-de-parâmetros">3.2.1 Instância com a passagem de parâmetros</h4>

<p><a id="tipos-passagem"></a></p>



<h5 id="3211-passando-doctrineormquery">3.2.1.1 Passando Doctrine\ORM\Query</h5>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-variable">$query</span> <span class="hljs-subst">=</span> <span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>getService()
              <span class="hljs-subst">-&gt;</span>getEntityManager()
              <span class="hljs-subst">-&gt;</span>createQuery(<span class="hljs-string">'
            select subcategoria 
                from InepZend\Module\UnitTest\Entity\Subcategoria subcategoria 
            where subcategoria = ?1'</span>)
             <span class="hljs-subst">-&gt;</span>setParameter(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);

<span class="hljs-variable">$paginator</span> <span class="hljs-subst">=</span> <span class="hljs-literal">new</span> Paginator(<span class="hljs-variable">$query</span>, <span class="hljs-variable">$intPage</span>, <span class="hljs-variable">$intItemPerPage</span>);</code></pre>



<h5 id="3212-passando-arrayadapter">3.2.1.2 Passando ArrayAdapter</h5>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-comment"># O retorno do FindBy é um array().</span>
<span class="hljs-variable">$arrDados</span> = <span class="hljs-variable">$this</span>-&gt;getService()-&gt;findBy(
    <span class="hljs-keyword">array</span>(
        <span class="hljs-string">'campo'</span> =&gt; <span class="hljs-string">'valor'</span>
        )
);
<span class="hljs-variable">$paginator</span> = <span class="hljs-keyword">new</span> Paginator(<span class="hljs-variable">$arrDados</span>, <span class="hljs-variable">$intPage</span>, <span class="hljs-variable">$intItemPerPage</span>);

<span class="hljs-comment"># O Paginator aceita um array, conforme o codigo abaixo</span>
<span class="hljs-variable">$arrDados</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0</span> =&gt;
            <span class="hljs-keyword">array</span>(
                <span class="hljs-string">'NO_FILE'</span> =&gt; <span class="hljs-string">'AcaoMenu1421956943.json'</span>,
                <span class="hljs-string">'DS_PATH'</span> =&gt; <span class="hljs-string">'data/ssi/AcaoMenu1421956943.json'</span>,
                <span class="hljs-string">'DS_SIZE'</span> =&gt; <span class="hljs-string">'1.78 KB(s)'</span>,
                <span class="hljs-string">'DT_CREATE'</span> =&gt; <span class="hljs-string">'22/01/2015 18:02:23'</span>),
            <span class="hljs-number">1</span> =&gt;
            <span class="hljs-keyword">array</span>(
                <span class="hljs-string">'NO_FILE'</span> =&gt; <span class="hljs-string">'AcaoMenu1421956927.json'</span>,
                <span class="hljs-string">'DS_PATH'</span> =&gt; <span class="hljs-string">'data/ssi/AcaoMenu1421956927.json'</span>,
                <span class="hljs-string">'DS_SIZE'</span> =&gt; <span class="hljs-string">'1.78 KB(s)'</span>,
                <span class="hljs-string">'DT_CREATE'</span> =&gt; <span class="hljs-string">'22/01/2015 18:02:07'</span>));
<span class="hljs-variable">$paginator</span> = <span class="hljs-keyword">new</span> Paginator(<span class="hljs-variable">$arrDados</span>, <span class="hljs-variable">$intPage</span>, <span class="hljs-variable">$intItemPerPage</span>);</code></pre>



<h5 id="3213-passando-doctrineormnativequery">3.2.1.3 Passando Doctrine\ORM\NativeQuery</h5>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getQueryCustom</span><span class="hljs-params">(array <span class="hljs-variable">$arrCriteria</span> = null)</span>
{</span>
    <span class="hljs-variable">$strAlias</span> = <span class="hljs-variable">$this</span>-&gt;getAlias();
    <span class="hljs-variable">$strSQL</span> = <span class="hljs-string">'SELECT
                      TO_CHAR('</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'.id_arquivo) id_arquivo,
                      publicacao.id_publicacao,
                      publicacao.id_usuario_inclusao,
                      publicacao.no_publicacao,
                      publicacao.no_autor_publicacao,
                      publicacao.nu_volume_publicacao,
                      publicacao.nu_ano_publicacao,
                      publicacao.ds_sinopse_publicacao,
                      publicacao.in_destaque_publicacao,
                      publicacao.nu_publicacao,
                      publicacao.dt_publicacao,
                      publicacao.tp_situacao_publicacao,
                      '</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'.no_arquivo,
                      '</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'.ds_caminho_arquivo,
                      '</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'.tp_arquivo,
                      '</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'.dt_inclusao
              FROM publicacoes.tb_arquivo '</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'
              INNER JOIN publicacoes.tb_publicacao publicacao ON
                      '</span> . <span class="hljs-variable">$strAlias</span> . <span class="hljs-string">'.id_publicacao = publicacao.id_publicacao'</span>;

      <span class="hljs-variable">$arrWhereParameter</span> = <span class="hljs-variable">$this</span>-&gt;constructWhereParameter(<span class="hljs-variable">$strAlias</span>, <span class="hljs-variable">$arrCriteria</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">'no_arquivo'</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">'id_arquivo'</span>, <span class="hljs-string">'tp_arquivo'</span>));
      <span class="hljs-variable">$arrWhere</span> = <span class="hljs-variable">$arrWhereParameter</span>[<span class="hljs-number">0</span>];
      <span class="hljs-variable">$arrParameter</span> = <span class="hljs-variable">$arrWhereParameter</span>[<span class="hljs-number">1</span>];
      <span class="hljs-keyword">if</span> (count(<span class="hljs-variable">$arrWhere</span>) &gt; <span class="hljs-number">0</span>)
          <span class="hljs-variable">$strSQL</span> .= <span class="hljs-string">' WHERE '</span> . implode(<span class="hljs-string">' AND '</span>, <span class="hljs-variable">$arrWhere</span>);
      <span class="hljs-variable">$arrMapping</span> = <span class="hljs-keyword">array</span>(
              <span class="hljs-variable">$strAlias</span> =&gt; <span class="hljs-keyword">array</span>(
                      <span class="hljs-string">'from'</span> =&gt; <span class="hljs-keyword">array</span>(
                          <span class="hljs-string">'entity'</span> =&gt; <span class="hljs-string">'Publicacao\Entity\Arquivo'</span>,
                      ),
                      <span class="hljs-string">'field'</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">'id_arquivo'</span>, <span class="hljs-string">'no_arquivo'</span>, <span class="hljs-string">'ds_caminho_arquivo'</span>, <span class="hljs-string">'tp_arquivo'</span>, <span class="hljs-string">'dt_inclusao'</span>),

               ),
              <span class="hljs-string">'publicacao'</span> =&gt; <span class="hljs-keyword">array</span>(
                        <span class="hljs-string">'join'</span> =&gt; <span class="hljs-keyword">array</span>(
                            <span class="hljs-string">'entity'</span> =&gt; <span class="hljs-string">'Publicacao\Entity\Publicacao'</span>,
                            <span class="hljs-string">'parent_alias'</span> =&gt; <span class="hljs-variable">$strAlias</span>,
                            <span class="hljs-string">'parent_attribute'</span> =&gt; <span class="hljs-string">'publicacao'</span>,
                        ),
                        <span class="hljs-string">'field'</span> =&gt; <span class="hljs-keyword">array</span>(
                                          <span class="hljs-string">'id_publicacao'</span>, 
                                          <span class="hljs-string">'id_usuario_inclusao'</span>, 
                                          <span class="hljs-string">'no_publicacao'</span>, 
                                          <span class="hljs-string">'no_autor_publicacao'</span>, 
                                          <span class="hljs-string">'nu_volume_publicacao'</span>, 
                                          <span class="hljs-string">'nu_ano_publicacao'</span>, 
                                          <span class="hljs-string">'ds_sinopse_publicacao'</span>, 
                                          <span class="hljs-string">'in_destaque_publicacao'</span>, 
                                          <span class="hljs-string">'nu_publicacao'</span>, 
                                          <span class="hljs-string">'dt_publicacao'</span>, 
                                          <span class="hljs-string">'tp_situacao_publicacao'</span>),
                )
        );
        <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;executeSQLMapping(<span class="hljs-variable">$strSQL</span>, <span class="hljs-variable">$arrParameter</span>, <span class="hljs-variable">$this</span>-&gt;constructMapping(<span class="hljs-variable">$arrMapping</span>));

}



<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPaginator</span><span class="hljs-params">(<span class="hljs-variable">$intPage</span> = <span class="hljs-number">1</span>, <span class="hljs-variable">$intItemPerPage</span> = <span class="hljs-number">10</span>)</span>
{</span>
    <span class="hljs-variable">$paginator</span> = <span class="hljs-keyword">new</span> Paginator(<span class="hljs-variable">$this</span>-&gt;getQueryCustom(), <span class="hljs-variable">$intPage</span>, <span class="hljs-variable">$intItemPerPage</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$paginator</span>;
}</code></pre>



<h5 id="3214-passando-doctrinedbalstatement">3.2.1.4 Passando Doctrine\DBAL\Statement</h5>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-attribute">...</span>
<span class="hljs-variable">$stmt</span> <span class="hljs-subst">=</span> <span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>getService()
             <span class="hljs-subst">-&gt;</span>getEntityManager()
             <span class="hljs-subst">-&gt;</span>getConnection()
             <span class="hljs-subst">-&gt;</span>prepare(<span class="hljs-string">'SELECT * FROM PUBLICACOES.TB_SUBCATEGORIA WHERE CO_SUBCATEGORIA = ?'</span>);
<span class="hljs-variable">$stmt</span><span class="hljs-subst">-&gt;</span>bindValue(<span class="hljs-number">1</span>, <span class="hljs-string">'CO_SUBCATEGORIA'</span>);

<span class="hljs-variable">$paginator</span> <span class="hljs-subst">=</span> <span class="hljs-literal">new</span> Paginator(<span class="hljs-variable">$stmt</span>, <span class="hljs-variable">$intPage</span>, <span class="hljs-variable">$intItemPerPage</span>);</code></pre>

<p><a id="repository"></a></p>



<h3 id="33-repository-utilizando-o-componente">3.3. Repository - Utilizando o componente</h3>



<h4 id="331-findbypaged">3.3.1 findByPaged()</h4>

<blockquote>
  <ul>
  <li>Para facilitar a utilização do componente no InepZend foi realizado o mapeamento da Paginator dentro da camada <strong>Model</strong> a partir do componente <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Repository.Repository.html" target="_blank">\InepZend\Repository</a>. <br>
  <ul><li>Conforme o padrão adotado no InepZend, ao criar uma classe repository, se faz necessário utilizar o componente <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Repository.Repository.html" target="_blank">Repository</a>.</li></ul></li>
  <li>No componente Repository há o método <strong>findByPaged()</strong> responsável em retornar um Paginator. <br>
  <ul><li>Os tipos esperados, objeto query/array/string DQL, no último parâmetro do método findByPaged(), <strong><em>$mixDQLQuery</em></strong>,  podem ser identificado no item <a href="#tipos-passagem">3.2.1.1</a>.</li></ul></li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">InepZend</span>\<span class="hljs-title">Repository</span>\<span class="hljs-title">Repository</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinhaReository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Repository</span>
{</span>
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">meuMetodoNaRepository</span><span class="hljs-params">()</span>
    {</span>
        <span class="hljs-comment">// Logica</span>
        <span class="hljs-variable">$paginator</span> = <span class="hljs-variable">$this</span>-&gt;findByPaged(<span class="hljs-variable">$arrCriteria</span>, <span class="hljs-variable">$strSortName</span>, <span class="hljs-variable">$strSortOrder</span>, <span class="hljs-variable">$intPage</span>, <span class="hljs-variable">$intItemPerPage</span>, <span class="hljs-variable">$mixDQLQuery</span>);
    }
}</code></pre>

<blockquote>
  <ul>
  <li>A engenharia implementada no componente Repository por parte da Arquitetura para se obter os dados do tipo Paginator se torna transparente ao se utilizar o método  <strong>findByPaged()</strong>, bastando somente chamar o método e passar os dados definidos na assinatura do método conforme exemplo acima.</li>
  </ul>
</blockquote>

<p><a id="service"></a></p>



<h3 id="34-service-utilizando-o-componente">3.4. Service - Utilizando o componente</h3>

<blockquote>
  <ul>
  <li>A engenharia implementada na Service, mais especificamente no componente <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Service.AbstractServiceRepository.html" target="_blank">\InepZend\Service</a>, segue a mesma do item <a href="#repository">Repository</a>.</li>
  </ul>
</blockquote>



<h4 id="341-findbypaged">3.4.1 findByPaged()</h4>

<blockquote>
  <ul>
  <li>No componente  <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Service.AbstractServiceRepository.html" target="_blank">Service</a>, mais especificamente na classe <em>AbstractServiceRepository()</em>, há o método <strong>findByPaged()</strong> responsável em retornar um Paginator. <br>
  <ul><li>Ele invoca o <strong>findByPaged()</strong> do componente <a href="#repository">Repository</a>.</li></ul></li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs coffeescript">$query = $<span class="hljs-keyword">this</span>-&gt;getService<span class="hljs-function"><span class="hljs-params">()</span>
              -&gt;</span>getEntityManager<span class="hljs-function"><span class="hljs-params">()</span>
              -&gt;</span>createQuery<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">'select subcategoria from InepZend\Module\UnitTest\Entity\Subcategoria subcategoria where subcategoria = ?1'</span>)</span>
              -&gt;</span>setParameter(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);
$<span class="hljs-keyword">this</span>-&gt;findByPaged(array(<span class="hljs-string">'co_subcategoria'</span><span class="hljs-function"> =&gt;</span> <span class="hljs-attribute">self</span>::CO_SUBCATEGORIA), <span class="hljs-string">'no_subcategoria'</span>, <span class="hljs-string">'ASC'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, $query);</code></pre>

<p><a id="controller"></a></p>



<h3 id="35-controller-utilizando-o-componente">3.5. Controller - Utilizando o componente</h3>

<blockquote>
  <ul>
  <li>Na camada Controller contém o componente <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Controller.AbstractControllerPaginator.html" target="_blank">\InepZend\Controller</a> que realiza o mapeamento do Paginator através da classe AbstractControllerPaginator().</li>
  <li>Na classe AbstractControllerPaginator() existe a possibilidade de utilizar dois métodos, sendo esses: <br>
  <ul><li>indexPaginatorAction()</li>
  <li>ajaxPaginatorAction()</li></ul></li>
  <li>Ao se utilizar esses dois métodos é realizado a chamada o método <strong>findByPaged()</strong> da <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Service.AbstractServiceRepository.html" target="_blank">Service</a> por padrão.</li>
  </ul>
</blockquote>



<h4 id="351-indexpaginatoraction">3.5.1 indexPaginatorAction()</h4>

<blockquote>
  <ul>
  <li>Método responsável em realizar a paginação dos registros via método <strong>findByPaged</strong>, por padrão, e retornar uma View parametrizada com as informações da paginação.</li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>indexPaginatorAction(<span class="hljs-variable">$arrCriteria</span>, 
                            <span class="hljs-variable">$strSortName</span>, 
                            <span class="hljs-variable">$strSortOrder</span>, 
                            <span class="hljs-variable">$intItemPerPage</span>, 
                            <span class="hljs-variable">$strService</span>, 
                            <span class="hljs-variable">$strMethodService</span>);

<span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>indexPaginatorAction(<span class="hljs-built_in">array</span>(<span class="hljs-string">'campo'</span> <span class="hljs-subst">=&gt;</span> <span class="hljs-string">'valor'</span>) , <span class="hljs-string">'nome_do_campo'</span>, <span class="hljs-string">'ASC'</span>, <span class="hljs-number">10</span>, <span class="hljs-string">'Path\To\Service'</span>, <span class="hljs-string">'seuMetodoNaService'</span>);</code></pre>

<blockquote>
  <ul>
  <li>O primeiro parâmetro é responsável pela filtragem condicional das informações;</li>
  <li>O segundo parâmetro é responsável por definir o nome do atributo a ser ordenado;</li>
  <li>O terceiro parâmetro é responsável por definir a ordem crescente ou decrescente em relação ao nome do atributo a ser ordenado;</li>
  <li>O quarto parâmetro é responsável por definir o número de registros por página.  <br>
  <ul><li>Caso não seja parametrizado haverá uma busca no <strong>GET</strong> para verificar se existe a sua parametrização, ou ainda será assumido o valor padrão de <strong>10</strong> registros;</li></ul></li>
  <li>O quinto parâmetro é responsável por definir o <strong>namespace da Service</strong> a ser acionada.  <br>
  <ul><li>Caso não seja parametrizado será assumido o valor padrão da Service correspondente à Controller;</li></ul></li>
  <li>O sexto parâmetro é responsável por definir o método da Service (por padrão é o findByPaged) a ser utilizada.</li>
  </ul>
  
  <blockquote>
    <p><strong>Obs.:</strong> O número da página a ter seus registros listados terá também uma busca no <strong>GET</strong> para verificar se existe a sua parametrização, ou ainda será assumido o valor padrão de <strong>1</strong>;</p>
  </blockquote>
</blockquote>



<h4 id="352-ajaxpaginatoraction">3.5.2 ajaxPaginatorAction()</h4>

<blockquote>
  <ul>
  <li>Método responsável em realizar por ajax a paginação dos registros via algum método da Service (por padrão é o findByPaged) e retornar as devidas informações relacionadas à paginação.</li>
  <li>Caso seja uma paginação para uso da biblioteca <strong><em>JS Flexigrid</em></strong>, será retornada uma View contendo um XML específico para seu uso, caso contrário será retornado o próprio <a href="#41">InepZend\Paginator\Paginator</a>.</li>
  <li>As necessárias parametrizações de paginação e o invocamento do método de Serviço que instancia o <a href="#41">InepZend\Paginator\Paginator</a> ou que acessa o método da Repository que manipulará o <a href="#41">InepZend\Paginator\Paginator</a> é realizado pelo método <a href="#getPaginator">getPaginator</a> da <a href="http://desenvphp.inep.gov.br/apidoc/source-class-InepZend.Controller.AbstractControllerPaginator.html" target="_blank">AbstractControllerPaginator</a>;</li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-comment"># Forma de chamada do metodo ajaxPaginatorAction()</span>
<span class="hljs-variable">$this</span>-&gt;ajaxPaginatorAction(<span class="hljs-variable">$mixDQLQuery</span>, 
                           <span class="hljs-variable">$strService</span>, 
                           <span class="hljs-variable">$arrMethodPaging</span>, 
                           <span class="hljs-variable">$arrMethodPk</span>, 
                           <span class="hljs-variable">$intItemPerPage</span>, 
                           <span class="hljs-variable">$booFlexigrid</span>, 
                           <span class="hljs-variable">$arrCriteria</span>, 
                           <span class="hljs-variable">$strMethodService</span>)

<span class="hljs-comment"># Exemplo 1</span>
<span class="hljs-variable">$arrCriteria</span> = <span class="hljs-variable">$this</span>-&gt;getInfoAjaxPaginator(<span class="hljs-string">'arrCriteria'</span>);
<span class="hljs-variable">$this</span>-&gt;ajaxPaginatorAction(<span class="hljs-variable">$this</span>-&gt;getService()-&gt;getDQLCustom(<span class="hljs-variable">$arrCriteria</span>));

<span class="hljs-comment"># Exemplo 2</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajaxHistoryPaginatorAction</span><span class="hljs-params">()</span>
{</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::ajaxPaginatorAction(<span class="hljs-keyword">null</span>, <span class="hljs-string">'InepZend\Module\Application\Service\AutoloadConfig'</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">'no_autor'</span>, <span class="hljs-string">'no_file'</span>, <span class="hljs-string">'dt_ocorrencia'</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">'no_file'</span>), <span class="hljs-number">10</span>, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">'tp_file'</span> =&gt; AutoloadConfig::TYPE_FILE_HISTORY));
}

<span class="hljs-comment"># Exemplo 3</span>
<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajaxPaginatorAction</span><span class="hljs-params">()</span>
{</span>
        <span class="hljs-variable">$arrCriteria</span> = <span class="hljs-variable">$this</span>-&gt;getInfoAjaxPaginator(<span class="hljs-string">'arrCriteria'</span>);
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$arrCriteria</span>)) {
            <span class="hljs-variable">$arrIdPublicacao</span> = <span class="hljs-variable">$this</span>-&gt;getService()-&gt;listLastId(<span class="hljs-number">0</span>);
            <span class="hljs-keyword">if</span> ((!is_array(<span class="hljs-variable">$arrIdPublicacao</span>)) || (count(<span class="hljs-variable">$arrIdPublicacao</span>) == <span class="hljs-number">0</span>)) {
                <span class="hljs-variable">$flexigrid</span> = <span class="hljs-keyword">new</span> \InepZend\Grid\Flexigrid\Flexigrid();
                <span class="hljs-variable">$strXml</span> = <span class="hljs-variable">$flexigrid</span>-&gt;getXml();
                <span class="hljs-keyword">return</span> <span class="hljs-variable">$this</span>-&gt;getViewClearContent(<span class="hljs-variable">$strXml</span>);
            }
            <span class="hljs-variable">$arrCriteria</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">'id_publicacao'</span> =&gt; <span class="hljs-variable">$arrIdPublicacao</span>);
        } <span class="hljs-keyword">elseif</span> (array_key_exists(<span class="hljs-string">'id_publicacao'</span>, <span class="hljs-variable">$arrCriteria</span>))
            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arrCriteria</span>[<span class="hljs-string">'id_publicacao'</span>]);
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">parent</span>::ajaxPaginatorAction(<span class="hljs-variable">$this</span>-&gt;getService()-&gt;getDQLCustom(<span class="hljs-variable">$arrCriteria</span>));
}</code></pre>

<blockquote>
  <p></p><ul> <br>
  <li>O primeiro parâmetro é um objeto <strong>query, registros de array ou string DQL</strong> a ser paginado;</li>
  <li>O segundo parâmetro é responsável por definir o namespace da Service a ser acionada.  <br>
  <ul><li>Caso não seja parametrizado será assumido o valor padrão da Service correspondente à Controller;</li></ul></li>
  <li>O terceiro parâmetro é responsável por definir os métodos ou índices de array que serão utilizados na montagem da Grid.  <br>
  <ul><li>Caso não seja parametrizado, será utilizado o valor definido no atributo <strong>arrMethodPaging</strong> da classe. </li>
  <li>É recomendado que o atributo <strong>arrMethodPaging</strong> da classe seja sempre definido no método construtor;</li></ul></li>
  <li>O quarto parâmetro é responsável por definir os métodos ou índices de array referentes à(s) chave(s) primária(s) da listagem paginada.  <br>
  <ul><li>Caso não seja parametrizado, será utilizado o valor definido no atributo <strong>arrMethodPk</strong> da classe. </li>
  <li>É recomendado que o atributo <strong>arrMethodPk</strong> da classe seja sempre definido no método construtor;</li></ul></li>
  <li>O quinto parâmetro é responsável por definir o número de registros por página.  <br>
  <ul><li>Caso não seja parametrizado haverá uma busca no <strong>POST</strong> para verificar se existe a sua parametrização, ou ainda será assumido o valor padrão de 10 registros;</li></ul></li>
  <li>O sexto parâmetro é responsável por definir o retorno da View contendo um XML específico para uso da FlexiGrid (valor padrão true);</li>
  <li>O sétimo parâmetro é responsável pela filtragem condicional das informações além daquelas definidas no <strong>POST</strong>;</li>
  <li>O oitavo parâmetro é responsável por definir o método da Service (por padrão é o findByPaged) a ser utilizada. <br></li></ul><p></p>
  
  <blockquote>
    <p><strong>Obs.:</strong> O número da página a ter seus registros listados terá também uma busca no <strong>POST</strong> para verificar se existe a sua parametrização, ou ainda será assumido o valor padrão de <strong>1</strong>;
    </p>
  </blockquote>
</blockquote>

<p><a id="getPaginator"></a></p>

<h3 id="36-getpaginator">3.6. getPaginator()</h3>

<blockquote>
  <ul>
  <li>Manipula as informações de paginação buscando o(s) valor(es) do(s) parâmetro(s) do método ou do <strong>POST</strong> conforme cada contexto.</li>
  <li>Invoca o método <strong>findByPaged</strong> por padrão de Serviço que instancia o <a href="#41">InepZend\Paginator\Paginator</a> ou que acessa o método da <a href="#repository">Repository</a> que manipulará o <a href="#41">InepZend\Paginator\Paginator</a>.</li>
  </ul>
</blockquote>

<p><a id="fluxo"></a></p>



<h3 id="37-fluxo-passando-pelas-camadas-utilizando-flexigrid">3.7. Fluxo - Passando pelas camadas utilizando FlexiGrid</h3>



<h4 id="372-definindo-a-paginação-no-construct-do-controller">3.7.2 Definindo a paginação no <strong>__construct</strong> do Controller</h4>



<pre class="prettyprint"><code class=" hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span><span class="hljs-params">()</span>
    {</span>
        <span class="hljs-keyword">parent</span>::__construct(<span class="hljs-keyword">__CLASS__</span>);
        <span class="hljs-variable">$this</span>-&gt;arrPk = <span class="hljs-keyword">array</span>(<span class="hljs-string">'id_publicacao'</span>);
        <span class="hljs-variable">$this</span>-&gt;arrMethodPk = <span class="hljs-keyword">array</span>(<span class="hljs-string">'getIdPublicacao'</span>);
        <span class="hljs-variable">$this</span>-&gt;arrMethodPaging = <span class="hljs-keyword">array</span>(<span class="hljs-string">'getNuPublicacao'</span>, <span class="hljs-string">'getNuVolumePublicacao'</span>, <span class="hljs-string">'getNoPublicacao'</span>, <span class="hljs-string">'getCategoria'</span>, <span class="hljs-string">'getSubcategoria'</span>, <span class="hljs-string">'getNuAnoPublicacao'</span>, <span class="hljs-string">'getDsSituacaoPublicacao'</span>);
    }</code></pre>

<blockquote>
  <ul>
  <li>Com os atributos definidos conforme o código aciama, a Helper irá identificar que existe uma paginação a ser exibida no PHTML onde que por default irá realizar as chamadas aos métodos ajaxPaginatorAction do componente <a href="#controller">Controller</a> que subsequentemente irá chamar os métodos findByPaged das camadas <a href="#service">Service</a> e <a href="#repository">Repository</a>.</li>
  <li><p>Para se obter a paginação (paginator) na Controller é preciso estender a classe <em>AbstractControllerPaginator</em> ou estender alguma que herde ou a estenda em sua hierarquia, como por exemplo <em>AbstractController</em>.</p>
  
  <blockquote>
    <p>De forma transparente a arquitetura criou o componente <strong>\InepZend\Grid\FlexiGrid</strong> que identifica através de sua <strong>Helper</strong> juntamente com o <strong>ajax.js</strong>, que também faz parte dos componentes JS do InepZend,  os atributos <strong><em>arrMethodPk</em></strong> e <strong><em>arrMethodPaging</em></strong> definidos no construtor da Controller. Esses dois componentes são responsáveis de verificar a Rota e estarta a construção da paginação que será exibida no PHTML.</p>
  </blockquote></li>
  <li><p>Após as devidas definições basta somente realizar a chamada da FlexiGrid no PHTML conforme o exemplo abaixo: <br>
  <a id="form-grid"></a></p></li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs lasso"><span class="hljs-subst">&lt;?</span>php
<span class="hljs-variable">$flexigrid</span> <span class="hljs-subst">=</span> <span class="hljs-variable">$this</span><span class="hljs-subst">-&gt;</span>flexigrid();
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setRoute(<span class="hljs-string">'publicacao'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setSortName(<span class="hljs-string">'id_publicacao'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setSortOrder(<span class="hljs-string">'desc'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setShowDelete(<span class="hljs-literal">false</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'nu_publicacao'</span>, <span class="hljs-string">'N°'</span>, <span class="hljs-number">70</span>, <span class="hljs-string">'center'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'nu_volume_publicacao'</span>, <span class="hljs-string">'Volume'</span>, <span class="hljs-number">120</span>, <span class="hljs-string">'center'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'no_publicacao'</span>, <span class="hljs-string">'Título da Publicação'</span>, <span class="hljs-number">350</span>, <span class="hljs-string">'left'</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'c.no_categoria'</span>, <span class="hljs-string">'Categoria'</span>, <span class="hljs-number">160</span>, <span class="hljs-string">'left'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'sc.no_subcategoria'</span>, <span class="hljs-string">'Subcategoria'</span>, <span class="hljs-number">160</span>, <span class="hljs-string">'left'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'nu_ano_publicacao'</span>, <span class="hljs-string">'Ano'</span>, <span class="hljs-number">50</span>, <span class="hljs-string">'center'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setCol(<span class="hljs-string">'tp_situacao_publicacao'</span>, <span class="hljs-string">'Situação da Publicação'</span>, <span class="hljs-number">130</span>, <span class="hljs-string">'left'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setButton(<span class="hljs-string">'Inativar'</span>, <span class="hljs-string">'delete'</span>, <span class="hljs-string">'inactivatePublication'</span>);
<span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>setItemPerPage(<span class="hljs-number">20</span>);
echo <span class="hljs-variable">$flexigrid</span><span class="hljs-subst">-&gt;</span>showGrid();
<span class="hljs-preprocessor">?&gt;</span><span class="hljs-markup"></span></code></pre>



<h4 id="372-utilizando-a-chamada-do-ajaxpaginatoraction">3.7.2 Utilizando a chamada do ajaxPaginatorAction()</h4>



<h5 id="3721-quando-há-filtro-no-phtml">3.7.2.1 Quando há filtro no PHTML</h5>

<blockquote>
  <ul>
  <li>Quando há necessidade de haver um filtro juntamente com a paginação deve-se definir em um Form referente ao filtro e a paginação, que no caso será uma FlexiGrid conforme o código <a href="#form-grid">acima</a>.</li>
  </ul>
</blockquote>



<h5 id="3722-quando-não-há-filtro-phtml">3.7.2.2 Quando não há filtro PHTML</h5>

<blockquote>
  <ul>
  <li>Quando não há filtro no arquivo PHTML é necessário utilizar o flexReload() para atualizar os dados da Grid. <br>
  <ul><li><strong>Por boas práticas é sugerido que as Grids sejam montadas no Form ao invés de ser colocado nos arquivos PHTML</strong>.</li></ul></li>
  </ul>
</blockquote>



<pre class="prettyprint"><code class=" hljs ruby"><span class="hljs-comment"># Quando a for uma rota diferente de ajaxPaginator() eh preciso inserir na chamada a rota.</span>
<span class="hljs-variable">$(</span><span class="hljs-string">'#tableData'</span>).flexOptions({<span class="hljs-symbol">url:</span> strGlobalBasePath + <span class="hljs-string">'/ssi-menu/ajaxHistoryPaginator'</span>});
<span class="hljs-comment"># Apos a atualizacao eh necessario executar o refresh da FlexiGrid. </span>
<span class="hljs-variable">$(</span><span class="hljs-string">'#tableData'</span>).flexReload();</code></pre>

<p><a id="iterator"></a></p>



<h3 id="38-erro-de-iterator">3.8. Erro de Iterator</h3>

<blockquote>
  <p>Durante o desenvolvimento para se obter uma paginação que utiliza a FlexiGrid ocorre exceções referente ao Iterator, no entanto o erro não é exatamente no Iterator e sim um erro referente a execução por exemplo de um banco de dados, sendo assim o erro de <strong>Itarator</strong> é a última exceção a ser exibida durante o fluxo da paginação. <br>
  Observe os erros abaixo e veja que o erro foi durante a execução de uma query incorreta que ocasionalmente gerou erro de Itarator:</p>
  
  <blockquote>
    <h4 id="erro-1">Erro 1</h4>
    
    <ul>
    <li>Zend\Paginator\Exception\RuntimeException</li>
    <li>Arquivo: <br>
    <ul><li>/home/Guerreiro777/www/InepSkeleton/vendor/zendframework/zendframework/library/Zend/Paginator/Paginator.php:637</li></ul></li>
    <li>Mensagem: <br>
    <ul><li>Error producing an <strong>iterator</strong></li></ul></li>
    </ul>
    
    <h4 id="erro-2">Erro 2</h4>
    
    <ul>
    <li>Doctrine\DBAL\Exception\DriverException</li>
    <li>Arquivo: <br>
    <ul><li><strong>/home/Guerreiro777/www/InepSkeleton/vendor/doctrine/dbal/lib/Doctrine/DBAL/Driver/AbstractOracleDriver.php:74</strong></li></ul></li>
    <li>Mensagem: <br>
    <ul><li>An exception occurred while executing ‘SELECT COUNT(*) AS dctrn_count FROM (SELECT DISTINCT ID_PUBLICACAO0 FROM (SELECT p0_.id_publicacao AS ID_PUBLICACAO0, p0_.id_usuario_inclusao AS ID_USUARIO_INCLUSAO1, p0_.no_publicacao AS NO_PUBLICACAO2, p0_.no_autor_publicacao AS NO_AUTOR_PUBLICACAO3, p0_.nu_volume_publicacao AS NU_VOLUME_PUBLICACAO4, p0_.nu_ano_publicacao AS NU_ANO_PUBLICACAO5, p0_.ds_sinopse_publicacao AS DS_SINOPSE_PUBLICACAO6, p0_.in_destaque_publicacao AS IN_DESTAQUE_PUBLICACAO7, p0_.nu_publicacao AS NU_PUBLICACAO8, p0_.dt_publicacao AS DT_PUBLICACAO9, p0_.tp_situacao_publicacao AS TP_SITUACAO_PUBLICACAO10, p0_.in_enviada AS IN_ENVIADA11 FROM publicacoes.tb_publicacao p0_ INNER JOIN publicacoes.tb_subcategoria p1_ ON p0_.co_subcategoria = p1_.co_subcategoria INNER JOIN publicacoes.tb_categoria p2_ ON p1_.co_categoria = p2_.co_categoria WHERE p0_.id_publicacao IN (?) ORDER BY p0_.id_publicacao DESC) dctrn_result) dctrn_table’ with params [11353]:ORA-01795: maximum number of expressions in a list is 1000</li></ul></li>
    </ul>
  </blockquote>
</blockquote>



<h2 id="4-referência"><a id="referencia"></a> <i class="icon-unlink"></i> 4. Referência </h2>

<blockquote>
  <p><a href="http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html">http://desenvphp.inep.gov.br/apidoc/namespace-InepZend.Paginator.html</a></p>
</blockquote></div></body>
</html>